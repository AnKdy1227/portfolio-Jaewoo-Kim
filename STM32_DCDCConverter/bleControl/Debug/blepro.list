
blepro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f38  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08005044  08005044  00006044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800534c  0800534c  00007064  2**0
                  CONTENTS
  4 .ARM          00000008  0800534c  0800534c  0000634c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005354  08005354  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005354  08005354  00006354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005358  08005358  00006358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800535c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000064  080053c0  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  080053c0  00007304  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5a8  00000000  00000000  0000708d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000206e  00000000  00000000  00014635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  000166a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a6e  00000000  00000000  000173f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a88  00000000  00000000  00017e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f58c  00000000  00000000  0002f8ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da90  00000000  00000000  0003ee7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc90a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d68  00000000  00000000  000cc950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000d06b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	0800502c 	.word	0x0800502c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	0800502c 	.word	0x0800502c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b094      	sub	sp, #80	@ 0x50
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	4a48      	ldr	r2, [pc, #288]	@ (80002a0 <HAL_UART_RxCpltCallback+0x130>)
 800017e:	4293      	cmp	r3, r2
 8000180:	f040 8089 	bne.w	8000296 <HAL_UART_RxCpltCallback+0x126>
    {
        char c = Rx_data[0];
 8000184:	4b47      	ldr	r3, [pc, #284]	@ (80002a4 <HAL_UART_RxCpltCallback+0x134>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

        if (c == '\r' || c == '\n') {
 800018c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000190:	2b0d      	cmp	r3, #13
 8000192:	d003      	beq.n	800019c <HAL_UART_RxCpltCallback+0x2c>
 8000194:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000198:	2b0a      	cmp	r3, #10
 800019a:	d168      	bne.n	800026e <HAL_UART_RxCpltCallback+0xfe>
            UART_Buffer[uart_index] = '\0';
 800019c:	4b42      	ldr	r3, [pc, #264]	@ (80002a8 <HAL_UART_RxCpltCallback+0x138>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	461a      	mov	r2, r3
 80001a2:	4b42      	ldr	r3, [pc, #264]	@ (80002ac <HAL_UART_RxCpltCallback+0x13c>)
 80001a4:	2100      	movs	r1, #0
 80001a6:	5499      	strb	r1, [r3, r2]

            if (strcmp(UART_Buffer, "start") == 0) {
 80001a8:	4941      	ldr	r1, [pc, #260]	@ (80002b0 <HAL_UART_RxCpltCallback+0x140>)
 80001aa:	4840      	ldr	r0, [pc, #256]	@ (80002ac <HAL_UART_RxCpltCallback+0x13c>)
 80001ac:	f7ff ffce 	bl	800014c <strcmp>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d119      	bne.n	80001ea <HAL_UART_RxCpltCallback+0x7a>
                pwm_enabled = 1;
 80001b6:	4b3f      	ldr	r3, [pc, #252]	@ (80002b4 <HAL_UART_RxCpltCallback+0x144>)
 80001b8:	2201      	movs	r2, #1
 80001ba:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_COUNTER(&htim1, 0);
 80001bc:	4b3e      	ldr	r3, [pc, #248]	@ (80002b8 <HAL_UART_RxCpltCallback+0x148>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2200      	movs	r2, #0
 80001c2:	625a      	str	r2, [r3, #36]	@ 0x24
                HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80001c4:	2100      	movs	r1, #0
 80001c6:	483c      	ldr	r0, [pc, #240]	@ (80002b8 <HAL_UART_RxCpltCallback+0x148>)
 80001c8:	f002 fc7e 	bl	8002ac8 <HAL_TIM_PWM_Start>
                HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80001cc:	2100      	movs	r1, #0
 80001ce:	483a      	ldr	r0, [pc, #232]	@ (80002b8 <HAL_UART_RxCpltCallback+0x148>)
 80001d0:	f003 f9ba 	bl	8003548 <HAL_TIMEx_PWMN_Start>
                HAL_TIM_Base_Start(&htim1);
 80001d4:	4838      	ldr	r0, [pc, #224]	@ (80002b8 <HAL_UART_RxCpltCallback+0x148>)
 80001d6:	f002 fbaf 	bl	8002938 <HAL_TIM_Base_Start>
                HAL_UART_Transmit(&huart1, (uint8_t*)"PWM started\r\n", 13, HAL_MAX_DELAY);
 80001da:	f04f 33ff 	mov.w	r3, #4294967295
 80001de:	220d      	movs	r2, #13
 80001e0:	4936      	ldr	r1, [pc, #216]	@ (80002bc <HAL_UART_RxCpltCallback+0x14c>)
 80001e2:	4837      	ldr	r0, [pc, #220]	@ (80002c0 <HAL_UART_RxCpltCallback+0x150>)
 80001e4:	f003 fbcf 	bl	8003986 <HAL_UART_Transmit>
 80001e8:	e03d      	b.n	8000266 <HAL_UART_RxCpltCallback+0xf6>
            }
            else if (strcmp(UART_Buffer, "stop") == 0) {
 80001ea:	4936      	ldr	r1, [pc, #216]	@ (80002c4 <HAL_UART_RxCpltCallback+0x154>)
 80001ec:	482f      	ldr	r0, [pc, #188]	@ (80002ac <HAL_UART_RxCpltCallback+0x13c>)
 80001ee:	f7ff ffad 	bl	800014c <strcmp>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d115      	bne.n	8000224 <HAL_UART_RxCpltCallback+0xb4>
                pwm_enabled = 0;
 80001f8:	4b2e      	ldr	r3, [pc, #184]	@ (80002b4 <HAL_UART_RxCpltCallback+0x144>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	701a      	strb	r2, [r3, #0]
                HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80001fe:	2100      	movs	r1, #0
 8000200:	482d      	ldr	r0, [pc, #180]	@ (80002b8 <HAL_UART_RxCpltCallback+0x148>)
 8000202:	f002 fd03 	bl	8002c0c <HAL_TIM_PWM_Stop>
                HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000206:	2100      	movs	r1, #0
 8000208:	482b      	ldr	r0, [pc, #172]	@ (80002b8 <HAL_UART_RxCpltCallback+0x148>)
 800020a:	f003 fa3b 	bl	8003684 <HAL_TIMEx_PWMN_Stop>
                HAL_TIM_Base_Stop(&htim1);
 800020e:	482a      	ldr	r0, [pc, #168]	@ (80002b8 <HAL_UART_RxCpltCallback+0x148>)
 8000210:	f002 fbdc 	bl	80029cc <HAL_TIM_Base_Stop>
                HAL_UART_Transmit(&huart1, (uint8_t*)"PWM stopped\r\n", 13, HAL_MAX_DELAY);
 8000214:	f04f 33ff 	mov.w	r3, #4294967295
 8000218:	220d      	movs	r2, #13
 800021a:	492b      	ldr	r1, [pc, #172]	@ (80002c8 <HAL_UART_RxCpltCallback+0x158>)
 800021c:	4828      	ldr	r0, [pc, #160]	@ (80002c0 <HAL_UART_RxCpltCallback+0x150>)
 800021e:	f003 fbb2 	bl	8003986 <HAL_UART_Transmit>
 8000222:	e020      	b.n	8000266 <HAL_UART_RxCpltCallback+0xf6>
            }
            else if (UART_Buffer[0] == '*') {
 8000224:	4b21      	ldr	r3, [pc, #132]	@ (80002ac <HAL_UART_RxCpltCallback+0x13c>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	2b2a      	cmp	r3, #42	@ 0x2a
 800022a:	d11c      	bne.n	8000266 <HAL_UART_RxCpltCallback+0xf6>
                uint32_t freq = atoi(&UART_Buffer[1]);
 800022c:	4827      	ldr	r0, [pc, #156]	@ (80002cc <HAL_UART_RxCpltCallback+0x15c>)
 800022e:	f004 f9c5 	bl	80045bc <atoi>
 8000232:	4603      	mov	r3, r0
 8000234:	64bb      	str	r3, [r7, #72]	@ 0x48
                PWM_Reconfigure(freq);
 8000236:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000238:	f000 fae4 	bl	8000804 <PWM_Reconfigure>

                char msg[64];
                sprintf(msg, "PWM frequency set to %lu Hz\r\n", freq);
 800023c:	f107 0308 	add.w	r3, r7, #8
 8000240:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000242:	4923      	ldr	r1, [pc, #140]	@ (80002d0 <HAL_UART_RxCpltCallback+0x160>)
 8000244:	4618      	mov	r0, r3
 8000246:	f004 fa41 	bl	80046cc <siprintf>
                HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800024a:	f107 0308 	add.w	r3, r7, #8
 800024e:	4618      	mov	r0, r3
 8000250:	f7ff ff86 	bl	8000160 <strlen>
 8000254:	4603      	mov	r3, r0
 8000256:	b29a      	uxth	r2, r3
 8000258:	f107 0108 	add.w	r1, r7, #8
 800025c:	f04f 33ff 	mov.w	r3, #4294967295
 8000260:	4817      	ldr	r0, [pc, #92]	@ (80002c0 <HAL_UART_RxCpltCallback+0x150>)
 8000262:	f003 fb90 	bl	8003986 <HAL_UART_Transmit>
            }
            uart_index = 0;
 8000266:	4b10      	ldr	r3, [pc, #64]	@ (80002a8 <HAL_UART_RxCpltCallback+0x138>)
 8000268:	2200      	movs	r2, #0
 800026a:	701a      	strb	r2, [r3, #0]
 800026c:	e00e      	b.n	800028c <HAL_UART_RxCpltCallback+0x11c>
        }
        else {
            if (uart_index < UART_BUFFER_SIZE - 1)
 800026e:	4b0e      	ldr	r3, [pc, #56]	@ (80002a8 <HAL_UART_RxCpltCallback+0x138>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b1e      	cmp	r3, #30
 8000274:	d80a      	bhi.n	800028c <HAL_UART_RxCpltCallback+0x11c>
                UART_Buffer[uart_index++] = c;
 8000276:	4b0c      	ldr	r3, [pc, #48]	@ (80002a8 <HAL_UART_RxCpltCallback+0x138>)
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	1c5a      	adds	r2, r3, #1
 800027c:	b2d1      	uxtb	r1, r2
 800027e:	4a0a      	ldr	r2, [pc, #40]	@ (80002a8 <HAL_UART_RxCpltCallback+0x138>)
 8000280:	7011      	strb	r1, [r2, #0]
 8000282:	4619      	mov	r1, r3
 8000284:	4a09      	ldr	r2, [pc, #36]	@ (80002ac <HAL_UART_RxCpltCallback+0x13c>)
 8000286:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800028a:	5453      	strb	r3, [r2, r1]
        }

        HAL_UART_Receive_IT(&huart1, Rx_data, 1);
 800028c:	2201      	movs	r2, #1
 800028e:	4905      	ldr	r1, [pc, #20]	@ (80002a4 <HAL_UART_RxCpltCallback+0x134>)
 8000290:	480b      	ldr	r0, [pc, #44]	@ (80002c0 <HAL_UART_RxCpltCallback+0x150>)
 8000292:	f003 fc03 	bl	8003a9c <HAL_UART_Receive_IT>
    }
}
 8000296:	bf00      	nop
 8000298:	3750      	adds	r7, #80	@ 0x50
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40013800 	.word	0x40013800
 80002a4:	200000a8 	.word	0x200000a8
 80002a8:	200000a0 	.word	0x200000a0
 80002ac:	20000080 	.word	0x20000080
 80002b0:	08005044 	.word	0x08005044
 80002b4:	200000a1 	.word	0x200000a1
 80002b8:	200000dc 	.word	0x200000dc
 80002bc:	0800504c 	.word	0x0800504c
 80002c0:	20000124 	.word	0x20000124
 80002c4:	0800505c 	.word	0x0800505c
 80002c8:	08005064 	.word	0x08005064
 80002cc:	20000081 	.word	0x20000081
 80002d0:	08005074 	.word	0x08005074

080002d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d4:	b5b0      	push	{r4, r5, r7, lr}
 80002d6:	b0d4      	sub	sp, #336	@ 0x150
 80002d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002da:	f000 fd05 	bl	8000ce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002de:	f000 f895 	bl	800040c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
char msg[] ="=== PWM Control Interface ===\r\n"
 80002e2:	4a42      	ldr	r2, [pc, #264]	@ (80003ec <main+0x118>)
 80002e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80002e8:	4611      	mov	r1, r2
 80002ea:	22e1      	movs	r2, #225	@ 0xe1
 80002ec:	4618      	mov	r0, r3
 80002ee:	f004 fa41 	bl	8004774 <memcpy>
	      "==============================\r\n";

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f2:	f000 fa19 	bl	8000728 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002f6:	f000 f9ed 	bl	80006d4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80002fa:	f000 f8e3 	bl	80004c4 <MX_ADC1_Init>
  MX_TIM1_Init();
 80002fe:	f000 f91f 	bl	8000540 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000302:	f000 f9bd 	bl	8000680 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000306:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800030a:	4618      	mov	r0, r3
 800030c:	f7ff ff28 	bl	8000160 <strlen>
 8000310:	4603      	mov	r3, r0
 8000312:	b29a      	uxth	r2, r3
 8000314:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8000318:	f04f 33ff 	mov.w	r3, #4294967295
 800031c:	4834      	ldr	r0, [pc, #208]	@ (80003f0 <main+0x11c>)
 800031e:	f003 fb32 	bl	8003986 <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart1, Rx_data, 1);
 8000322:	2201      	movs	r2, #1
 8000324:	4933      	ldr	r1, [pc, #204]	@ (80003f4 <main+0x120>)
 8000326:	4832      	ldr	r0, [pc, #200]	@ (80003f0 <main+0x11c>)
 8000328:	f003 fbb8 	bl	8003a9c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */
  HAL_UART_Receive_IT(&huart1, Rx_data, 1);
 800032c:	2201      	movs	r2, #1
 800032e:	4931      	ldr	r1, [pc, #196]	@ (80003f4 <main+0x120>)
 8000330:	482f      	ldr	r0, [pc, #188]	@ (80003f0 <main+0x11c>)
 8000332:	f003 fbb3 	bl	8003a9c <HAL_UART_Receive_IT>

  char msg2[] = "Echo mode ready. Type something.\r\n";
 8000336:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800033a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800033e:	4a2e      	ldr	r2, [pc, #184]	@ (80003f8 <main+0x124>)
 8000340:	461c      	mov	r4, r3
 8000342:	4615      	mov	r5, r2
 8000344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800034a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800034c:	682b      	ldr	r3, [r5, #0]
 800034e:	461a      	mov	r2, r3
 8000350:	8022      	strh	r2, [r4, #0]
 8000352:	3402      	adds	r4, #2
 8000354:	0c1b      	lsrs	r3, r3, #16
 8000356:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*)msg2, strlen(msg2), HAL_MAX_DELAY);
 8000358:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff feff 	bl	8000160 <strlen>
 8000362:	4603      	mov	r3, r0
 8000364:	b29a      	uxth	r2, r3
 8000366:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800036a:	f04f 33ff 	mov.w	r3, #4294967295
 800036e:	4820      	ldr	r0, [pc, #128]	@ (80003f0 <main+0x11c>)
 8000370:	f003 fb09 	bl	8003986 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (pwm_enabled)
 8000374:	4b21      	ldr	r3, [pc, #132]	@ (80003fc <main+0x128>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d032      	beq.n	80003e2 <main+0x10e>
	     {
	         HAL_ADC_Start(&hadc1);
 800037c:	4820      	ldr	r0, [pc, #128]	@ (8000400 <main+0x12c>)
 800037e:	f000 fe11 	bl	8000fa4 <HAL_ADC_Start>
	         HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000382:	f04f 31ff 	mov.w	r1, #4294967295
 8000386:	481e      	ldr	r0, [pc, #120]	@ (8000400 <main+0x12c>)
 8000388:	f000 fee6 	bl	8001158 <HAL_ADC_PollForConversion>
	         uint32_t ch1 = HAL_ADC_GetValue(&hadc1);
 800038c:	481c      	ldr	r0, [pc, #112]	@ (8000400 <main+0x12c>)
 800038e:	f000 ffe9 	bl	8001364 <HAL_ADC_GetValue>
 8000392:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
	         HAL_ADC_Stop(&hadc1);
 8000396:	481a      	ldr	r0, [pc, #104]	@ (8000400 <main+0x12c>)
 8000398:	f000 feb2 	bl	8001100 <HAL_ADC_Stop>

	         uint32_t voltage_mv = (3300 * ch1) / 4095;
 800039c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80003a0:	f640 42e4 	movw	r2, #3300	@ 0xce4
 80003a4:	fb03 f202 	mul.w	r2, r3, r2
 80003a8:	4b16      	ldr	r3, [pc, #88]	@ (8000404 <main+0x130>)
 80003aa:	fba3 1302 	umull	r1, r3, r3, r2
 80003ae:	1ad2      	subs	r2, r2, r3
 80003b0:	0852      	lsrs	r2, r2, #1
 80003b2:	4413      	add	r3, r2
 80003b4:	0adb      	lsrs	r3, r3, #11
 80003b6:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

	         char msg[64];
	         sprintf(msg, "[ADC] %lumV (ch1=%lu)\r\n", voltage_mv, ch1);
 80003ba:	4638      	mov	r0, r7
 80003bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80003c0:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80003c4:	4910      	ldr	r1, [pc, #64]	@ (8000408 <main+0x134>)
 80003c6:	f004 f981 	bl	80046cc <siprintf>
	         HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80003ca:	463b      	mov	r3, r7
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff fec7 	bl	8000160 <strlen>
 80003d2:	4603      	mov	r3, r0
 80003d4:	b29a      	uxth	r2, r3
 80003d6:	4639      	mov	r1, r7
 80003d8:	f04f 33ff 	mov.w	r3, #4294967295
 80003dc:	4804      	ldr	r0, [pc, #16]	@ (80003f0 <main+0x11c>)
 80003de:	f003 fad2 	bl	8003986 <HAL_UART_Transmit>
	     }

	     HAL_Delay(5000);
 80003e2:	f241 3088 	movw	r0, #5000	@ 0x1388
 80003e6:	f000 fce1 	bl	8000dac <HAL_Delay>
	  if (pwm_enabled)
 80003ea:	e7c3      	b.n	8000374 <main+0xa0>
 80003ec:	080050ac 	.word	0x080050ac
 80003f0:	20000124 	.word	0x20000124
 80003f4:	200000a8 	.word	0x200000a8
 80003f8:	08005190 	.word	0x08005190
 80003fc:	200000a1 	.word	0x200000a1
 8000400:	200000ac 	.word	0x200000ac
 8000404:	00100101 	.word	0x00100101
 8000408:	08005094 	.word	0x08005094

0800040c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b094      	sub	sp, #80	@ 0x50
 8000410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000412:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000416:	2228      	movs	r2, #40	@ 0x28
 8000418:	2100      	movs	r1, #0
 800041a:	4618      	mov	r0, r3
 800041c:	f004 f976 	bl	800470c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000420:	f107 0314 	add.w	r3, r7, #20
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	605a      	str	r2, [r3, #4]
 800042a:	609a      	str	r2, [r3, #8]
 800042c:	60da      	str	r2, [r3, #12]
 800042e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800043c:	2301      	movs	r3, #1
 800043e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000440:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000444:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000446:	2300      	movs	r3, #0
 8000448:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800044a:	2301      	movs	r3, #1
 800044c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800044e:	2302      	movs	r3, #2
 8000450:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000452:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000456:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000458:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800045c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800045e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000462:	4618      	mov	r0, r3
 8000464:	f001 fc9c 	bl	8001da0 <HAL_RCC_OscConfig>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800046e:	f000 fa2f 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000472:	230f      	movs	r3, #15
 8000474:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000476:	2302      	movs	r3, #2
 8000478:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800047e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000482:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000488:	f107 0314 	add.w	r3, r7, #20
 800048c:	2102      	movs	r1, #2
 800048e:	4618      	mov	r0, r3
 8000490:	f001 ff08 	bl	80022a4 <HAL_RCC_ClockConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800049a:	f000 fa19 	bl	80008d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800049e:	2302      	movs	r3, #2
 80004a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80004a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80004a6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	4618      	mov	r0, r3
 80004ac:	f002 f888 	bl	80025c0 <HAL_RCCEx_PeriphCLKConfig>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <SystemClock_Config+0xae>
  {
    Error_Handler();
 80004b6:	f000 fa0b 	bl	80008d0 <Error_Handler>
  }
}
 80004ba:	bf00      	nop
 80004bc:	3750      	adds	r7, #80	@ 0x50
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
	...

080004c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004d4:	4b18      	ldr	r3, [pc, #96]	@ (8000538 <MX_ADC1_Init+0x74>)
 80004d6:	4a19      	ldr	r2, [pc, #100]	@ (800053c <MX_ADC1_Init+0x78>)
 80004d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004da:	4b17      	ldr	r3, [pc, #92]	@ (8000538 <MX_ADC1_Init+0x74>)
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004e0:	4b15      	ldr	r3, [pc, #84]	@ (8000538 <MX_ADC1_Init+0x74>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004e6:	4b14      	ldr	r3, [pc, #80]	@ (8000538 <MX_ADC1_Init+0x74>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004ec:	4b12      	ldr	r3, [pc, #72]	@ (8000538 <MX_ADC1_Init+0x74>)
 80004ee:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80004f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004f4:	4b10      	ldr	r3, [pc, #64]	@ (8000538 <MX_ADC1_Init+0x74>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80004fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000538 <MX_ADC1_Init+0x74>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000500:	480d      	ldr	r0, [pc, #52]	@ (8000538 <MX_ADC1_Init+0x74>)
 8000502:	f000 fc77 	bl	8000df4 <HAL_ADC_Init>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800050c:	f000 f9e0 	bl	80008d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000510:	2300      	movs	r3, #0
 8000512:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000514:	2301      	movs	r3, #1
 8000516:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5; // sample time that f103 can have the longest (need for 50k source impedance)
 8000518:	2306      	movs	r3, #6
 800051a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	4619      	mov	r1, r3
 8000520:	4805      	ldr	r0, [pc, #20]	@ (8000538 <MX_ADC1_Init+0x74>)
 8000522:	f000 ff2b 	bl	800137c <HAL_ADC_ConfigChannel>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800052c:	f000 f9d0 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000530:	bf00      	nop
 8000532:	3710      	adds	r7, #16
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	200000ac 	.word	0x200000ac
 800053c:	40012400 	.word	0x40012400

08000540 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b096      	sub	sp, #88	@ 0x58
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000546:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000554:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800055e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]
 800056e:	615a      	str	r2, [r3, #20]
 8000570:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2220      	movs	r2, #32
 8000576:	2100      	movs	r1, #0
 8000578:	4618      	mov	r0, r3
 800057a:	f004 f8c7 	bl	800470c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800057e:	4b3e      	ldr	r3, [pc, #248]	@ (8000678 <MX_TIM1_Init+0x138>)
 8000580:	4a3e      	ldr	r2, [pc, #248]	@ (800067c <MX_TIM1_Init+0x13c>)
 8000582:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000584:	4b3c      	ldr	r3, [pc, #240]	@ (8000678 <MX_TIM1_Init+0x138>)
 8000586:	2200      	movs	r2, #0
 8000588:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800058a:	4b3b      	ldr	r3, [pc, #236]	@ (8000678 <MX_TIM1_Init+0x138>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7200;
 8000590:	4b39      	ldr	r3, [pc, #228]	@ (8000678 <MX_TIM1_Init+0x138>)
 8000592:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8000596:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000598:	4b37      	ldr	r3, [pc, #220]	@ (8000678 <MX_TIM1_Init+0x138>)
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800059e:	4b36      	ldr	r3, [pc, #216]	@ (8000678 <MX_TIM1_Init+0x138>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005a4:	4b34      	ldr	r3, [pc, #208]	@ (8000678 <MX_TIM1_Init+0x138>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005aa:	4833      	ldr	r0, [pc, #204]	@ (8000678 <MX_TIM1_Init+0x138>)
 80005ac:	f002 f974 	bl	8002898 <HAL_TIM_Base_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80005b6:	f000 f98b 	bl	80008d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005be:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005c0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80005c4:	4619      	mov	r1, r3
 80005c6:	482c      	ldr	r0, [pc, #176]	@ (8000678 <MX_TIM1_Init+0x138>)
 80005c8:	f002 fc46 	bl	8002e58 <HAL_TIM_ConfigClockSource>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80005d2:	f000 f97d 	bl	80008d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005d6:	4828      	ldr	r0, [pc, #160]	@ (8000678 <MX_TIM1_Init+0x138>)
 80005d8:	f002 fa1e 	bl	8002a18 <HAL_TIM_PWM_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80005e2:	f000 f975 	bl	80008d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005e6:	2300      	movs	r3, #0
 80005e8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ea:	2300      	movs	r3, #0
 80005ec:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005ee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80005f2:	4619      	mov	r1, r3
 80005f4:	4820      	ldr	r0, [pc, #128]	@ (8000678 <MX_TIM1_Init+0x138>)
 80005f6:	f003 f8a3 	bl	8003740 <HAL_TIMEx_MasterConfigSynchronization>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000600:	f000 f966 	bl	80008d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000604:	2360      	movs	r3, #96	@ 0x60
 8000606:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800060c:	2300      	movs	r3, #0
 800060e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000610:	2300      	movs	r3, #0
 8000612:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000614:	2300      	movs	r3, #0
 8000616:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000618:	2300      	movs	r3, #0
 800061a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800061c:	2300      	movs	r3, #0
 800061e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000620:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000624:	2200      	movs	r2, #0
 8000626:	4619      	mov	r1, r3
 8000628:	4813      	ldr	r0, [pc, #76]	@ (8000678 <MX_TIM1_Init+0x138>)
 800062a:	f002 fb53 	bl	8002cd4 <HAL_TIM_PWM_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000634:	f000 f94c 	bl	80008d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800064c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000650:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000652:	2300      	movs	r3, #0
 8000654:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	4619      	mov	r1, r3
 800065a:	4807      	ldr	r0, [pc, #28]	@ (8000678 <MX_TIM1_Init+0x138>)
 800065c:	f003 f8ce 	bl	80037fc <HAL_TIMEx_ConfigBreakDeadTime>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000666:	f000 f933 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800066a:	4803      	ldr	r0, [pc, #12]	@ (8000678 <MX_TIM1_Init+0x138>)
 800066c:	f000 f9c2 	bl	80009f4 <HAL_TIM_MspPostInit>

}
 8000670:	bf00      	nop
 8000672:	3758      	adds	r7, #88	@ 0x58
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200000dc 	.word	0x200000dc
 800067c:	40012c00 	.word	0x40012c00

08000680 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000684:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <MX_USART1_UART_Init+0x4c>)
 8000686:	4a12      	ldr	r2, [pc, #72]	@ (80006d0 <MX_USART1_UART_Init+0x50>)
 8000688:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800068a:	4b10      	ldr	r3, [pc, #64]	@ (80006cc <MX_USART1_UART_Init+0x4c>)
 800068c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000690:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <MX_USART1_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0c      	ldr	r3, [pc, #48]	@ (80006cc <MX_USART1_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <MX_USART1_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <MX_USART1_UART_Init+0x4c>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <MX_USART1_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <MX_USART1_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	@ (80006cc <MX_USART1_UART_Init+0x4c>)
 80006b8:	f003 f915 	bl	80038e6 <HAL_UART_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006c2:	f000 f905 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000124 	.word	0x20000124
 80006d0:	40013800 	.word	0x40013800

080006d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d8:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006da:	4a12      	ldr	r2, [pc, #72]	@ (8000724 <MX_USART2_UART_Init+0x50>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_USART2_UART_Init+0x4c>)
 800070c:	f003 f8eb 	bl	80038e6 <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000716:	f000 f8db 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	2000016c 	.word	0x2000016c
 8000724:	40004400 	.word	0x40004400

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0310 	add.w	r3, r7, #16
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073c:	4b2d      	ldr	r3, [pc, #180]	@ (80007f4 <MX_GPIO_Init+0xcc>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a2c      	ldr	r2, [pc, #176]	@ (80007f4 <MX_GPIO_Init+0xcc>)
 8000742:	f043 0310 	orr.w	r3, r3, #16
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b2a      	ldr	r3, [pc, #168]	@ (80007f4 <MX_GPIO_Init+0xcc>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0310 	and.w	r3, r3, #16
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000754:	4b27      	ldr	r3, [pc, #156]	@ (80007f4 <MX_GPIO_Init+0xcc>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a26      	ldr	r2, [pc, #152]	@ (80007f4 <MX_GPIO_Init+0xcc>)
 800075a:	f043 0320 	orr.w	r3, r3, #32
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b24      	ldr	r3, [pc, #144]	@ (80007f4 <MX_GPIO_Init+0xcc>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f003 0320 	and.w	r3, r3, #32
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076c:	4b21      	ldr	r3, [pc, #132]	@ (80007f4 <MX_GPIO_Init+0xcc>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a20      	ldr	r2, [pc, #128]	@ (80007f4 <MX_GPIO_Init+0xcc>)
 8000772:	f043 0304 	orr.w	r3, r3, #4
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b1e      	ldr	r3, [pc, #120]	@ (80007f4 <MX_GPIO_Init+0xcc>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0304 	and.w	r3, r3, #4
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000784:	4b1b      	ldr	r3, [pc, #108]	@ (80007f4 <MX_GPIO_Init+0xcc>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a1a      	ldr	r2, [pc, #104]	@ (80007f4 <MX_GPIO_Init+0xcc>)
 800078a:	f043 0308 	orr.w	r3, r3, #8
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b18      	ldr	r3, [pc, #96]	@ (80007f4 <MX_GPIO_Init+0xcc>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f003 0308 	and.w	r3, r3, #8
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2120      	movs	r1, #32
 80007a0:	4815      	ldr	r0, [pc, #84]	@ (80007f8 <MX_GPIO_Init+0xd0>)
 80007a2:	f001 fac3 	bl	8001d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ac:	4b13      	ldr	r3, [pc, #76]	@ (80007fc <MX_GPIO_Init+0xd4>)
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	4619      	mov	r1, r3
 80007ba:	4811      	ldr	r0, [pc, #68]	@ (8000800 <MX_GPIO_Init+0xd8>)
 80007bc:	f001 f932 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007c0:	2320      	movs	r3, #32
 80007c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2302      	movs	r3, #2
 80007ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	4619      	mov	r1, r3
 80007d6:	4808      	ldr	r0, [pc, #32]	@ (80007f8 <MX_GPIO_Init+0xd0>)
 80007d8:	f001 f924 	bl	8001a24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	2028      	movs	r0, #40	@ 0x28
 80007e2:	f001 f836 	bl	8001852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007e6:	2028      	movs	r0, #40	@ 0x28
 80007e8:	f001 f84f 	bl	800188a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ec:	bf00      	nop
 80007ee:	3720      	adds	r7, #32
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40010800 	.word	0x40010800
 80007fc:	10110000 	.word	0x10110000
 8000800:	40011000 	.word	0x40011000

08000804 <PWM_Reconfigure>:

/* USER CODE BEGIN 4 */
void PWM_Reconfigure(uint32_t frequency_hz)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b098      	sub	sp, #96	@ 0x60
 8000808:	af02      	add	r7, sp, #8
 800080a:	6078      	str	r0, [r7, #4]
    uint32_t timer_clk = 72000000;  // 72MHz
 800080c:	4b28      	ldr	r3, [pc, #160]	@ (80008b0 <PWM_Reconfigure+0xac>)
 800080e:	657b      	str	r3, [r7, #84]	@ 0x54
    uint32_t period = timer_clk / frequency_hz;
 8000810:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	fbb2 f3f3 	udiv	r3, r2, r3
 8000818:	653b      	str	r3, [r7, #80]	@ 0x50
    uint32_t pulse = (period * duty_cycle_percent) / 100;
 800081a:	4b26      	ldr	r3, [pc, #152]	@ (80008b4 <PWM_Reconfigure+0xb0>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000820:	fb02 f303 	mul.w	r3, r2, r3
 8000824:	4a24      	ldr	r2, [pc, #144]	@ (80008b8 <PWM_Reconfigure+0xb4>)
 8000826:	fba2 2303 	umull	r2, r3, r2, r3
 800082a:	095b      	lsrs	r3, r3, #5
 800082c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    deadtime_tick = (period - 2 * pulse) / 2;
 800082e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	085b      	lsrs	r3, r3, #1
 8000838:	4a20      	ldr	r2, [pc, #128]	@ (80008bc <PWM_Reconfigure+0xb8>)
 800083a:	6013      	str	r3, [r2, #0]

    TIM1->ARR = period - 1;
 800083c:	4a20      	ldr	r2, [pc, #128]	@ (80008c0 <PWM_Reconfigure+0xbc>)
 800083e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000840:	3b01      	subs	r3, #1
 8000842:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM1->CCR1 = pulse + deadtime_tick;
 8000844:	4b1d      	ldr	r3, [pc, #116]	@ (80008bc <PWM_Reconfigure+0xb8>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	491d      	ldr	r1, [pc, #116]	@ (80008c0 <PWM_Reconfigure+0xbc>)
 800084a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800084c:	4413      	add	r3, r2
 800084e:	634b      	str	r3, [r1, #52]	@ 0x34

    TIM1->BDTR &= ~TIM_BDTR_DTG_Msk;
 8000850:	4b1b      	ldr	r3, [pc, #108]	@ (80008c0 <PWM_Reconfigure+0xbc>)
 8000852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000854:	4a1a      	ldr	r2, [pc, #104]	@ (80008c0 <PWM_Reconfigure+0xbc>)
 8000856:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800085a:	6453      	str	r3, [r2, #68]	@ 0x44
    TIM1->BDTR |= deadtime_tick;
 800085c:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <PWM_Reconfigure+0xbc>)
 800085e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000860:	4b16      	ldr	r3, [pc, #88]	@ (80008bc <PWM_Reconfigure+0xb8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4916      	ldr	r1, [pc, #88]	@ (80008c0 <PWM_Reconfigure+0xbc>)
 8000866:	4313      	orrs	r3, r2
 8000868:	644b      	str	r3, [r1, #68]	@ 0x44

    pwm_freq_hz = frequency_hz;
 800086a:	4a16      	ldr	r2, [pc, #88]	@ (80008c4 <PWM_Reconfigure+0xc0>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6013      	str	r3, [r2, #0]

    char debug_msg[64];
    sprintf(debug_msg, "ARR=%lu, CCR1=%lu, deadtime=%lu\r\n", TIM1->ARR, TIM1->CCR1, deadtime_tick);
 8000870:	4b13      	ldr	r3, [pc, #76]	@ (80008c0 <PWM_Reconfigure+0xbc>)
 8000872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <PWM_Reconfigure+0xbc>)
 8000876:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000878:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <PWM_Reconfigure+0xb8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f107 000c 	add.w	r0, r7, #12
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	460b      	mov	r3, r1
 8000884:	4910      	ldr	r1, [pc, #64]	@ (80008c8 <PWM_Reconfigure+0xc4>)
 8000886:	f003 ff21 	bl	80046cc <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fc66 	bl	8000160 <strlen>
 8000894:	4603      	mov	r3, r0
 8000896:	b29a      	uxth	r2, r3
 8000898:	f107 010c 	add.w	r1, r7, #12
 800089c:	f04f 33ff 	mov.w	r3, #4294967295
 80008a0:	480a      	ldr	r0, [pc, #40]	@ (80008cc <PWM_Reconfigure+0xc8>)
 80008a2:	f003 f870 	bl	8003986 <HAL_UART_Transmit>
}
 80008a6:	bf00      	nop
 80008a8:	3758      	adds	r7, #88	@ 0x58
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	044aa200 	.word	0x044aa200
 80008b4:	20000004 	.word	0x20000004
 80008b8:	51eb851f 	.word	0x51eb851f
 80008bc:	200000a4 	.word	0x200000a4
 80008c0:	40012c00 	.word	0x40012c00
 80008c4:	20000000 	.word	0x20000000
 80008c8:	080051b4 	.word	0x080051b4
 80008cc:	20000124 	.word	0x20000124

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <Error_Handler+0x8>

080008dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008e2:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <HAL_MspInit+0x5c>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	4a14      	ldr	r2, [pc, #80]	@ (8000938 <HAL_MspInit+0x5c>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6193      	str	r3, [r2, #24]
 80008ee:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <HAL_MspInit+0x5c>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <HAL_MspInit+0x5c>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000938 <HAL_MspInit+0x5c>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000904:	61d3      	str	r3, [r2, #28]
 8000906:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <HAL_MspInit+0x5c>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000912:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <HAL_MspInit+0x60>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	4a04      	ldr	r2, [pc, #16]	@ (800093c <HAL_MspInit+0x60>)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092e:	bf00      	nop
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	40021000 	.word	0x40021000
 800093c:	40010000 	.word	0x40010000

08000940 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a14      	ldr	r2, [pc, #80]	@ (80009ac <HAL_ADC_MspInit+0x6c>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d121      	bne.n	80009a4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000960:	4b13      	ldr	r3, [pc, #76]	@ (80009b0 <HAL_ADC_MspInit+0x70>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a12      	ldr	r2, [pc, #72]	@ (80009b0 <HAL_ADC_MspInit+0x70>)
 8000966:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b10      	ldr	r3, [pc, #64]	@ (80009b0 <HAL_ADC_MspInit+0x70>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000978:	4b0d      	ldr	r3, [pc, #52]	@ (80009b0 <HAL_ADC_MspInit+0x70>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a0c      	ldr	r2, [pc, #48]	@ (80009b0 <HAL_ADC_MspInit+0x70>)
 800097e:	f043 0304 	orr.w	r3, r3, #4
 8000982:	6193      	str	r3, [r2, #24]
 8000984:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <HAL_ADC_MspInit+0x70>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8000990:	2311      	movs	r3, #17
 8000992:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000994:	2303      	movs	r3, #3
 8000996:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 0310 	add.w	r3, r7, #16
 800099c:	4619      	mov	r1, r3
 800099e:	4805      	ldr	r0, [pc, #20]	@ (80009b4 <HAL_ADC_MspInit+0x74>)
 80009a0:	f001 f840 	bl	8001a24 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80009a4:	bf00      	nop
 80009a6:	3720      	adds	r7, #32
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40012400 	.word	0x40012400
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40010800 	.word	0x40010800

080009b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a09      	ldr	r2, [pc, #36]	@ (80009ec <HAL_TIM_Base_MspInit+0x34>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d10b      	bne.n	80009e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009ca:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <HAL_TIM_Base_MspInit+0x38>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	4a08      	ldr	r2, [pc, #32]	@ (80009f0 <HAL_TIM_Base_MspInit+0x38>)
 80009d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009d4:	6193      	str	r3, [r2, #24]
 80009d6:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <HAL_TIM_Base_MspInit+0x38>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80009e2:	bf00      	nop
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	40012c00 	.word	0x40012c00
 80009f0:	40021000 	.word	0x40021000

080009f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a19      	ldr	r2, [pc, #100]	@ (8000a74 <HAL_TIM_MspPostInit+0x80>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d12a      	bne.n	8000a6a <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <HAL_TIM_MspPostInit+0x84>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a17      	ldr	r2, [pc, #92]	@ (8000a78 <HAL_TIM_MspPostInit+0x84>)
 8000a1a:	f043 0304 	orr.w	r3, r3, #4
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <HAL_TIM_MspPostInit+0x84>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f003 0304 	and.w	r3, r3, #4
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000a2c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000a30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2302      	movs	r3, #2
 8000a38:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480e      	ldr	r0, [pc, #56]	@ (8000a7c <HAL_TIM_MspPostInit+0x88>)
 8000a42:	f000 ffef 	bl	8001a24 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8000a46:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <HAL_TIM_MspPostInit+0x8c>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	61fb      	str	r3, [r7, #28]
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000a52:	61fb      	str	r3, [r7, #28]
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000a5a:	61fb      	str	r3, [r7, #28]
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a62:	61fb      	str	r3, [r7, #28]
 8000a64:	4a06      	ldr	r2, [pc, #24]	@ (8000a80 <HAL_TIM_MspPostInit+0x8c>)
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a6a:	bf00      	nop
 8000a6c:	3720      	adds	r7, #32
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40012c00 	.word	0x40012c00
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40010800 	.word	0x40010800
 8000a80:	40010000 	.word	0x40010000

08000a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	@ 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0318 	add.w	r3, r7, #24
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a39      	ldr	r2, [pc, #228]	@ (8000b84 <HAL_UART_MspInit+0x100>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d13a      	bne.n	8000b1a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aa4:	4b38      	ldr	r3, [pc, #224]	@ (8000b88 <HAL_UART_MspInit+0x104>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	4a37      	ldr	r2, [pc, #220]	@ (8000b88 <HAL_UART_MspInit+0x104>)
 8000aaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aae:	6193      	str	r3, [r2, #24]
 8000ab0:	4b35      	ldr	r3, [pc, #212]	@ (8000b88 <HAL_UART_MspInit+0x104>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	4b32      	ldr	r3, [pc, #200]	@ (8000b88 <HAL_UART_MspInit+0x104>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a31      	ldr	r2, [pc, #196]	@ (8000b88 <HAL_UART_MspInit+0x104>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	6193      	str	r3, [r2, #24]
 8000ac8:	4b2f      	ldr	r3, [pc, #188]	@ (8000b88 <HAL_UART_MspInit+0x104>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f003 0304 	and.w	r3, r3, #4
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ad4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 0318 	add.w	r3, r7, #24
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4828      	ldr	r0, [pc, #160]	@ (8000b8c <HAL_UART_MspInit+0x108>)
 8000aea:	f000 ff9b 	bl	8001a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000aee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 0318 	add.w	r3, r7, #24
 8000b00:	4619      	mov	r1, r3
 8000b02:	4822      	ldr	r0, [pc, #136]	@ (8000b8c <HAL_UART_MspInit+0x108>)
 8000b04:	f000 ff8e 	bl	8001a24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2025      	movs	r0, #37	@ 0x25
 8000b0e:	f000 fea0 	bl	8001852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b12:	2025      	movs	r0, #37	@ 0x25
 8000b14:	f000 feb9 	bl	800188a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b18:	e030      	b.n	8000b7c <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART2)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000b90 <HAL_UART_MspInit+0x10c>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d12b      	bne.n	8000b7c <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b24:	4b18      	ldr	r3, [pc, #96]	@ (8000b88 <HAL_UART_MspInit+0x104>)
 8000b26:	69db      	ldr	r3, [r3, #28]
 8000b28:	4a17      	ldr	r2, [pc, #92]	@ (8000b88 <HAL_UART_MspInit+0x104>)
 8000b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b2e:	61d3      	str	r3, [r2, #28]
 8000b30:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <HAL_UART_MspInit+0x104>)
 8000b32:	69db      	ldr	r3, [r3, #28]
 8000b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3c:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <HAL_UART_MspInit+0x104>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a11      	ldr	r2, [pc, #68]	@ (8000b88 <HAL_UART_MspInit+0x104>)
 8000b42:	f043 0304 	orr.w	r3, r3, #4
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b0f      	ldr	r3, [pc, #60]	@ (8000b88 <HAL_UART_MspInit+0x104>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0304 	and.w	r3, r3, #4
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b54:	230c      	movs	r3, #12
 8000b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f107 0318 	add.w	r3, r7, #24
 8000b64:	4619      	mov	r1, r3
 8000b66:	4809      	ldr	r0, [pc, #36]	@ (8000b8c <HAL_UART_MspInit+0x108>)
 8000b68:	f000 ff5c 	bl	8001a24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2100      	movs	r1, #0
 8000b70:	2026      	movs	r0, #38	@ 0x26
 8000b72:	f000 fe6e 	bl	8001852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b76:	2026      	movs	r0, #38	@ 0x26
 8000b78:	f000 fe87 	bl	800188a <HAL_NVIC_EnableIRQ>
}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	@ 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40013800 	.word	0x40013800
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40010800 	.word	0x40010800
 8000b90:	40004400 	.word	0x40004400

08000b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <NMI_Handler+0x4>

08000b9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <MemManage_Handler+0x4>

08000bac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <BusFault_Handler+0x4>

08000bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <UsageFault_Handler+0x4>

08000bbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr

08000bc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr

08000be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be4:	f000 f8c6 	bl	8000d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bf0:	4802      	ldr	r0, [pc, #8]	@ (8000bfc <USART1_IRQHandler+0x10>)
 8000bf2:	f002 ff79 	bl	8003ae8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000124 	.word	0x20000124

08000c00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c04:	4802      	ldr	r0, [pc, #8]	@ (8000c10 <USART2_IRQHandler+0x10>)
 8000c06:	f002 ff6f 	bl	8003ae8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	2000016c 	.word	0x2000016c

08000c14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c18:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c1c:	f001 f89e 	bl	8001d5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c2c:	4a14      	ldr	r2, [pc, #80]	@ (8000c80 <_sbrk+0x5c>)
 8000c2e:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <_sbrk+0x60>)
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c38:	4b13      	ldr	r3, [pc, #76]	@ (8000c88 <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d102      	bne.n	8000c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c40:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <_sbrk+0x64>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	@ (8000c8c <_sbrk+0x68>)
 8000c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c46:	4b10      	ldr	r3, [pc, #64]	@ (8000c88 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d207      	bcs.n	8000c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c54:	f003 fd62 	bl	800471c <__errno>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c62:	e009      	b.n	8000c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c64:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <_sbrk+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6a:	4b07      	ldr	r3, [pc, #28]	@ (8000c88 <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	4a05      	ldr	r2, [pc, #20]	@ (8000c88 <_sbrk+0x64>)
 8000c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c76:	68fb      	ldr	r3, [r7, #12]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20005000 	.word	0x20005000
 8000c84:	00000400 	.word	0x00000400
 8000c88:	200001b4 	.word	0x200001b4
 8000c8c:	20000308 	.word	0x20000308

08000c90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr

08000c9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c9c:	f7ff fff8 	bl	8000c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca0:	480b      	ldr	r0, [pc, #44]	@ (8000cd0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ca2:	490c      	ldr	r1, [pc, #48]	@ (8000cd4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb6:	4a09      	ldr	r2, [pc, #36]	@ (8000cdc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cb8:	4c09      	ldr	r4, [pc, #36]	@ (8000ce0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f003 fd2f 	bl	8004728 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cca:	f7ff fb03 	bl	80002d4 <main>
  bx lr
 8000cce:	4770      	bx	lr
  ldr r0, =_sdata
 8000cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000cd8:	0800535c 	.word	0x0800535c
  ldr r2, =_sbss
 8000cdc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000ce0:	20000304 	.word	0x20000304

08000ce4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ce4:	e7fe      	b.n	8000ce4 <ADC1_2_IRQHandler>
	...

08000ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cec:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <HAL_Init+0x28>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a07      	ldr	r2, [pc, #28]	@ (8000d10 <HAL_Init+0x28>)
 8000cf2:	f043 0310 	orr.w	r3, r3, #16
 8000cf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f000 fd9f 	bl	800183c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f000 f808 	bl	8000d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d04:	f7ff fdea 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40022000 	.word	0x40022000

08000d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d1c:	4b12      	ldr	r3, [pc, #72]	@ (8000d68 <HAL_InitTick+0x54>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <HAL_InitTick+0x58>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4619      	mov	r1, r3
 8000d26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 fdb7 	bl	80018a6 <HAL_SYSTICK_Config>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00e      	b.n	8000d60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b0f      	cmp	r3, #15
 8000d46:	d80a      	bhi.n	8000d5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f000 fd7f 	bl	8001852 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d54:	4a06      	ldr	r2, [pc, #24]	@ (8000d70 <HAL_InitTick+0x5c>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e000      	b.n	8000d60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	20000010 	.word	0x20000010
 8000d70:	2000000c 	.word	0x2000000c

08000d74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d78:	4b05      	ldr	r3, [pc, #20]	@ (8000d90 <HAL_IncTick+0x1c>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b05      	ldr	r3, [pc, #20]	@ (8000d94 <HAL_IncTick+0x20>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	4a03      	ldr	r2, [pc, #12]	@ (8000d94 <HAL_IncTick+0x20>)
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	20000010 	.word	0x20000010
 8000d94:	200001b8 	.word	0x200001b8

08000d98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d9c:	4b02      	ldr	r3, [pc, #8]	@ (8000da8 <HAL_GetTick+0x10>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr
 8000da8:	200001b8 	.word	0x200001b8

08000dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db4:	f7ff fff0 	bl	8000d98 <HAL_GetTick>
 8000db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc4:	d005      	beq.n	8000dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000df0 <HAL_Delay+0x44>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4413      	add	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dd2:	bf00      	nop
 8000dd4:	f7ff ffe0 	bl	8000d98 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d8f7      	bhi.n	8000dd4 <HAL_Delay+0x28>
  {
  }
}
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000010 	.word	0x20000010

08000df4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e00:	2300      	movs	r3, #0
 8000e02:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d101      	bne.n	8000e16 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e0be      	b.n	8000f94 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d109      	bne.n	8000e38 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff fd84 	bl	8000940 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f000 fbf1 	bl	8001620 <ADC_ConversionStop_Disable>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e46:	f003 0310 	and.w	r3, r3, #16
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f040 8099 	bne.w	8000f82 <HAL_ADC_Init+0x18e>
 8000e50:	7dfb      	ldrb	r3, [r7, #23]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f040 8095 	bne.w	8000f82 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e5c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000e60:	f023 0302 	bic.w	r3, r3, #2
 8000e64:	f043 0202 	orr.w	r2, r3, #2
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e74:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	7b1b      	ldrb	r3, [r3, #12]
 8000e7a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e7c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e8c:	d003      	beq.n	8000e96 <HAL_ADC_Init+0xa2>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d102      	bne.n	8000e9c <HAL_ADC_Init+0xa8>
 8000e96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e9a:	e000      	b.n	8000e9e <HAL_ADC_Init+0xaa>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	7d1b      	ldrb	r3, [r3, #20]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d119      	bne.n	8000ee0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	7b1b      	ldrb	r3, [r3, #12]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d109      	bne.n	8000ec8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	035a      	lsls	r2, r3, #13
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	e00b      	b.n	8000ee0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ecc:	f043 0220 	orr.w	r2, r3, #32
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ed8:	f043 0201 	orr.w	r2, r3, #1
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	689a      	ldr	r2, [r3, #8]
 8000efa:	4b28      	ldr	r3, [pc, #160]	@ (8000f9c <HAL_ADC_Init+0x1a8>)
 8000efc:	4013      	ands	r3, r2
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	6812      	ldr	r2, [r2, #0]
 8000f02:	68b9      	ldr	r1, [r7, #8]
 8000f04:	430b      	orrs	r3, r1
 8000f06:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f10:	d003      	beq.n	8000f1a <HAL_ADC_Init+0x126>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d104      	bne.n	8000f24 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	051b      	lsls	r3, r3, #20
 8000f22:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f2a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	430a      	orrs	r2, r1
 8000f36:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <HAL_ADC_Init+0x1ac>)
 8000f40:	4013      	ands	r3, r2
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d10b      	bne.n	8000f60 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f52:	f023 0303 	bic.w	r3, r3, #3
 8000f56:	f043 0201 	orr.w	r2, r3, #1
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f5e:	e018      	b.n	8000f92 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f64:	f023 0312 	bic.w	r3, r3, #18
 8000f68:	f043 0210 	orr.w	r2, r3, #16
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f74:	f043 0201 	orr.w	r2, r3, #1
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f80:	e007      	b.n	8000f92 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f86:	f043 0210 	orr.w	r2, r3, #16
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	ffe1f7fd 	.word	0xffe1f7fd
 8000fa0:	ff1f0efe 	.word	0xff1f0efe

08000fa4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d101      	bne.n	8000fbe <HAL_ADC_Start+0x1a>
 8000fba:	2302      	movs	r3, #2
 8000fbc:	e098      	b.n	80010f0 <HAL_ADC_Start+0x14c>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f000 fad0 	bl	800156c <ADC_Enable>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f040 8087 	bne.w	80010e6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000fe0:	f023 0301 	bic.w	r3, r3, #1
 8000fe4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a41      	ldr	r2, [pc, #260]	@ (80010f8 <HAL_ADC_Start+0x154>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d105      	bne.n	8001002 <HAL_ADC_Start+0x5e>
 8000ff6:	4b41      	ldr	r3, [pc, #260]	@ (80010fc <HAL_ADC_Start+0x158>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d115      	bne.n	800102e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001006:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001018:	2b00      	cmp	r3, #0
 800101a:	d026      	beq.n	800106a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001020:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001024:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800102c:	e01d      	b.n	800106a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001032:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a2f      	ldr	r2, [pc, #188]	@ (80010fc <HAL_ADC_Start+0x158>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d004      	beq.n	800104e <HAL_ADC_Start+0xaa>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a2b      	ldr	r2, [pc, #172]	@ (80010f8 <HAL_ADC_Start+0x154>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d10d      	bne.n	800106a <HAL_ADC_Start+0xc6>
 800104e:	4b2b      	ldr	r3, [pc, #172]	@ (80010fc <HAL_ADC_Start+0x158>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001056:	2b00      	cmp	r3, #0
 8001058:	d007      	beq.n	800106a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800105e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001062:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800106e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d006      	beq.n	8001084 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800107a:	f023 0206 	bic.w	r2, r3, #6
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001082:	e002      	b.n	800108a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f06f 0202 	mvn.w	r2, #2
 800109a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80010a6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80010aa:	d113      	bne.n	80010d4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80010b0:	4a11      	ldr	r2, [pc, #68]	@ (80010f8 <HAL_ADC_Start+0x154>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d105      	bne.n	80010c2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80010b6:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <HAL_ADC_Start+0x158>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d108      	bne.n	80010d4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	e00c      	b.n	80010ee <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689a      	ldr	r2, [r3, #8]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	e003      	b.n	80010ee <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40012800 	.word	0x40012800
 80010fc:	40012400 	.word	0x40012400

08001100 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001112:	2b01      	cmp	r3, #1
 8001114:	d101      	bne.n	800111a <HAL_ADC_Stop+0x1a>
 8001116:	2302      	movs	r3, #2
 8001118:	e01a      	b.n	8001150 <HAL_ADC_Stop+0x50>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2201      	movs	r2, #1
 800111e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 fa7c 	bl	8001620 <ADC_ConversionStop_Disable>
 8001128:	4603      	mov	r3, r0
 800112a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d109      	bne.n	8001146 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001136:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800113a:	f023 0301 	bic.w	r3, r3, #1
 800113e:	f043 0201 	orr.w	r2, r3, #1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b087      	sub	sp, #28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800116e:	f7ff fe13 	bl	8000d98 <HAL_GetTick>
 8001172:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00b      	beq.n	800119a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001186:	f043 0220 	orr.w	r2, r3, #32
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e0d3      	b.n	8001342 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d131      	bne.n	800120c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ae:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d12a      	bne.n	800120c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80011b6:	e021      	b.n	80011fc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011be:	d01d      	beq.n	80011fc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d007      	beq.n	80011d6 <HAL_ADC_PollForConversion+0x7e>
 80011c6:	f7ff fde7 	bl	8000d98 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d212      	bcs.n	80011fc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d10b      	bne.n	80011fc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011e8:	f043 0204 	orr.w	r2, r3, #4
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e0a2      	b.n	8001342 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0d6      	beq.n	80011b8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800120a:	e070      	b.n	80012ee <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800120c:	4b4f      	ldr	r3, [pc, #316]	@ (800134c <HAL_ADC_PollForConversion+0x1f4>)
 800120e:	681c      	ldr	r4, [r3, #0]
 8001210:	2002      	movs	r0, #2
 8001212:	f001 fa8b 	bl	800272c <HAL_RCCEx_GetPeriphCLKFreq>
 8001216:	4603      	mov	r3, r0
 8001218:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6919      	ldr	r1, [r3, #16]
 8001222:	4b4b      	ldr	r3, [pc, #300]	@ (8001350 <HAL_ADC_PollForConversion+0x1f8>)
 8001224:	400b      	ands	r3, r1
 8001226:	2b00      	cmp	r3, #0
 8001228:	d118      	bne.n	800125c <HAL_ADC_PollForConversion+0x104>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	68d9      	ldr	r1, [r3, #12]
 8001230:	4b48      	ldr	r3, [pc, #288]	@ (8001354 <HAL_ADC_PollForConversion+0x1fc>)
 8001232:	400b      	ands	r3, r1
 8001234:	2b00      	cmp	r3, #0
 8001236:	d111      	bne.n	800125c <HAL_ADC_PollForConversion+0x104>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6919      	ldr	r1, [r3, #16]
 800123e:	4b46      	ldr	r3, [pc, #280]	@ (8001358 <HAL_ADC_PollForConversion+0x200>)
 8001240:	400b      	ands	r3, r1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d108      	bne.n	8001258 <HAL_ADC_PollForConversion+0x100>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68d9      	ldr	r1, [r3, #12]
 800124c:	4b43      	ldr	r3, [pc, #268]	@ (800135c <HAL_ADC_PollForConversion+0x204>)
 800124e:	400b      	ands	r3, r1
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <HAL_ADC_PollForConversion+0x100>
 8001254:	2314      	movs	r3, #20
 8001256:	e020      	b.n	800129a <HAL_ADC_PollForConversion+0x142>
 8001258:	2329      	movs	r3, #41	@ 0x29
 800125a:	e01e      	b.n	800129a <HAL_ADC_PollForConversion+0x142>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6919      	ldr	r1, [r3, #16]
 8001262:	4b3d      	ldr	r3, [pc, #244]	@ (8001358 <HAL_ADC_PollForConversion+0x200>)
 8001264:	400b      	ands	r3, r1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d106      	bne.n	8001278 <HAL_ADC_PollForConversion+0x120>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68d9      	ldr	r1, [r3, #12]
 8001270:	4b3a      	ldr	r3, [pc, #232]	@ (800135c <HAL_ADC_PollForConversion+0x204>)
 8001272:	400b      	ands	r3, r1
 8001274:	2b00      	cmp	r3, #0
 8001276:	d00d      	beq.n	8001294 <HAL_ADC_PollForConversion+0x13c>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6919      	ldr	r1, [r3, #16]
 800127e:	4b38      	ldr	r3, [pc, #224]	@ (8001360 <HAL_ADC_PollForConversion+0x208>)
 8001280:	400b      	ands	r3, r1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d108      	bne.n	8001298 <HAL_ADC_PollForConversion+0x140>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68d9      	ldr	r1, [r3, #12]
 800128c:	4b34      	ldr	r3, [pc, #208]	@ (8001360 <HAL_ADC_PollForConversion+0x208>)
 800128e:	400b      	ands	r3, r1
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <HAL_ADC_PollForConversion+0x140>
 8001294:	2354      	movs	r3, #84	@ 0x54
 8001296:	e000      	b.n	800129a <HAL_ADC_PollForConversion+0x142>
 8001298:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800129a:	fb02 f303 	mul.w	r3, r2, r3
 800129e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80012a0:	e021      	b.n	80012e6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a8:	d01a      	beq.n	80012e0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d007      	beq.n	80012c0 <HAL_ADC_PollForConversion+0x168>
 80012b0:	f7ff fd72 	bl	8000d98 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d20f      	bcs.n	80012e0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d90b      	bls.n	80012e0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012cc:	f043 0204 	orr.w	r2, r3, #4
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e030      	b.n	8001342 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	3301      	adds	r3, #1
 80012e4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d8d9      	bhi.n	80012a2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f06f 0212 	mvn.w	r2, #18
 80012f6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800130e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001312:	d115      	bne.n	8001340 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001318:	2b00      	cmp	r3, #0
 800131a:	d111      	bne.n	8001340 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001320:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800132c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d105      	bne.n	8001340 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001338:	f043 0201 	orr.w	r2, r3, #1
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	371c      	adds	r7, #28
 8001346:	46bd      	mov	sp, r7
 8001348:	bd90      	pop	{r4, r7, pc}
 800134a:	bf00      	nop
 800134c:	20000008 	.word	0x20000008
 8001350:	24924924 	.word	0x24924924
 8001354:	00924924 	.word	0x00924924
 8001358:	12492492 	.word	0x12492492
 800135c:	00492492 	.word	0x00492492
 8001360:	00249249 	.word	0x00249249

08001364 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001394:	2b01      	cmp	r3, #1
 8001396:	d101      	bne.n	800139c <HAL_ADC_ConfigChannel+0x20>
 8001398:	2302      	movs	r3, #2
 800139a:	e0dc      	b.n	8001556 <HAL_ADC_ConfigChannel+0x1da>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2201      	movs	r2, #1
 80013a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b06      	cmp	r3, #6
 80013aa:	d81c      	bhi.n	80013e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	3b05      	subs	r3, #5
 80013be:	221f      	movs	r2, #31
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	4019      	ands	r1, r3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	6818      	ldr	r0, [r3, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	3b05      	subs	r3, #5
 80013d8:	fa00 f203 	lsl.w	r2, r0, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80013e4:	e03c      	b.n	8001460 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b0c      	cmp	r3, #12
 80013ec:	d81c      	bhi.n	8001428 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	3b23      	subs	r3, #35	@ 0x23
 8001400:	221f      	movs	r2, #31
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	4019      	ands	r1, r3
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	6818      	ldr	r0, [r3, #0]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	3b23      	subs	r3, #35	@ 0x23
 800141a:	fa00 f203 	lsl.w	r2, r0, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	631a      	str	r2, [r3, #48]	@ 0x30
 8001426:	e01b      	b.n	8001460 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	3b41      	subs	r3, #65	@ 0x41
 800143a:	221f      	movs	r2, #31
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	4019      	ands	r1, r3
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	3b41      	subs	r3, #65	@ 0x41
 8001454:	fa00 f203 	lsl.w	r2, r0, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	430a      	orrs	r2, r1
 800145e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b09      	cmp	r3, #9
 8001466:	d91c      	bls.n	80014a2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68d9      	ldr	r1, [r3, #12]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4613      	mov	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4413      	add	r3, r2
 8001478:	3b1e      	subs	r3, #30
 800147a:	2207      	movs	r2, #7
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	4019      	ands	r1, r3
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	6898      	ldr	r0, [r3, #8]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4613      	mov	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	4413      	add	r3, r2
 8001492:	3b1e      	subs	r3, #30
 8001494:	fa00 f203 	lsl.w	r2, r0, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	e019      	b.n	80014d6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6919      	ldr	r1, [r3, #16]
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	2207      	movs	r2, #7
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	4019      	ands	r1, r3
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	6898      	ldr	r0, [r3, #8]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4613      	mov	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	fa00 f203 	lsl.w	r2, r0, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b10      	cmp	r3, #16
 80014dc:	d003      	beq.n	80014e6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014e2:	2b11      	cmp	r3, #17
 80014e4:	d132      	bne.n	800154c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001560 <HAL_ADC_ConfigChannel+0x1e4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d125      	bne.n	800153c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d126      	bne.n	800154c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800150c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b10      	cmp	r3, #16
 8001514:	d11a      	bne.n	800154c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001516:	4b13      	ldr	r3, [pc, #76]	@ (8001564 <HAL_ADC_ConfigChannel+0x1e8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a13      	ldr	r2, [pc, #76]	@ (8001568 <HAL_ADC_ConfigChannel+0x1ec>)
 800151c:	fba2 2303 	umull	r2, r3, r2, r3
 8001520:	0c9a      	lsrs	r2, r3, #18
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800152c:	e002      	b.n	8001534 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	3b01      	subs	r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f9      	bne.n	800152e <HAL_ADC_ConfigChannel+0x1b2>
 800153a:	e007      	b.n	800154c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001540:	f043 0220 	orr.w	r2, r3, #32
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	40012400 	.word	0x40012400
 8001564:	20000008 	.word	0x20000008
 8001568:	431bde83 	.word	0x431bde83

0800156c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b01      	cmp	r3, #1
 8001588:	d040      	beq.n	800160c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f042 0201 	orr.w	r2, r2, #1
 8001598:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800159a:	4b1f      	ldr	r3, [pc, #124]	@ (8001618 <ADC_Enable+0xac>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a1f      	ldr	r2, [pc, #124]	@ (800161c <ADC_Enable+0xb0>)
 80015a0:	fba2 2303 	umull	r2, r3, r2, r3
 80015a4:	0c9b      	lsrs	r3, r3, #18
 80015a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015a8:	e002      	b.n	80015b0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f9      	bne.n	80015aa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015b6:	f7ff fbef 	bl	8000d98 <HAL_GetTick>
 80015ba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015bc:	e01f      	b.n	80015fe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015be:	f7ff fbeb 	bl	8000d98 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d918      	bls.n	80015fe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d011      	beq.n	80015fe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015de:	f043 0210 	orr.w	r2, r3, #16
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ea:	f043 0201 	orr.w	r2, r3, #1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e007      	b.n	800160e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b01      	cmp	r3, #1
 800160a:	d1d8      	bne.n	80015be <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000008 	.word	0x20000008
 800161c:	431bde83 	.word	0x431bde83

08001620 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b01      	cmp	r3, #1
 8001638:	d12e      	bne.n	8001698 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0201 	bic.w	r2, r2, #1
 8001648:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800164a:	f7ff fba5 	bl	8000d98 <HAL_GetTick>
 800164e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001650:	e01b      	b.n	800168a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001652:	f7ff fba1 	bl	8000d98 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d914      	bls.n	800168a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b01      	cmp	r3, #1
 800166c:	d10d      	bne.n	800168a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001672:	f043 0210 	orr.w	r2, r3, #16
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800167e:	f043 0201 	orr.w	r2, r3, #1
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e007      	b.n	800169a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b01      	cmp	r3, #1
 8001696:	d0dc      	beq.n	8001652 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b4:	4b0c      	ldr	r3, [pc, #48]	@ (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016c0:	4013      	ands	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d6:	4a04      	ldr	r2, [pc, #16]	@ (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	60d3      	str	r3, [r2, #12]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f0:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <__NVIC_GetPriorityGrouping+0x18>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	f003 0307 	and.w	r3, r3, #7
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	2b00      	cmp	r3, #0
 8001718:	db0b      	blt.n	8001732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	f003 021f 	and.w	r2, r3, #31
 8001720:	4906      	ldr	r1, [pc, #24]	@ (800173c <__NVIC_EnableIRQ+0x34>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	2001      	movs	r0, #1
 800172a:	fa00 f202 	lsl.w	r2, r0, r2
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	e000e100 	.word	0xe000e100

08001740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	db0a      	blt.n	800176a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	490c      	ldr	r1, [pc, #48]	@ (800178c <__NVIC_SetPriority+0x4c>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	0112      	lsls	r2, r2, #4
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	440b      	add	r3, r1
 8001764:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001768:	e00a      	b.n	8001780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4908      	ldr	r1, [pc, #32]	@ (8001790 <__NVIC_SetPriority+0x50>)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	3b04      	subs	r3, #4
 8001778:	0112      	lsls	r2, r2, #4
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	440b      	add	r3, r1
 800177e:	761a      	strb	r2, [r3, #24]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000e100 	.word	0xe000e100
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	@ 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f1c3 0307 	rsb	r3, r3, #7
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	bf28      	it	cs
 80017b2:	2304      	movcs	r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3304      	adds	r3, #4
 80017ba:	2b06      	cmp	r3, #6
 80017bc:	d902      	bls.n	80017c4 <NVIC_EncodePriority+0x30>
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3b03      	subs	r3, #3
 80017c2:	e000      	b.n	80017c6 <NVIC_EncodePriority+0x32>
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	401a      	ands	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43d9      	mvns	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	4313      	orrs	r3, r2
         );
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3724      	adds	r7, #36	@ 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001808:	d301      	bcc.n	800180e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180a:	2301      	movs	r3, #1
 800180c:	e00f      	b.n	800182e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180e:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <SysTick_Config+0x40>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001816:	210f      	movs	r1, #15
 8001818:	f04f 30ff 	mov.w	r0, #4294967295
 800181c:	f7ff ff90 	bl	8001740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001820:	4b05      	ldr	r3, [pc, #20]	@ (8001838 <SysTick_Config+0x40>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001826:	4b04      	ldr	r3, [pc, #16]	@ (8001838 <SysTick_Config+0x40>)
 8001828:	2207      	movs	r2, #7
 800182a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	e000e010 	.word	0xe000e010

0800183c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ff2d 	bl	80016a4 <__NVIC_SetPriorityGrouping>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001852:	b580      	push	{r7, lr}
 8001854:	b086      	sub	sp, #24
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001864:	f7ff ff42 	bl	80016ec <__NVIC_GetPriorityGrouping>
 8001868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	6978      	ldr	r0, [r7, #20]
 8001870:	f7ff ff90 	bl	8001794 <NVIC_EncodePriority>
 8001874:	4602      	mov	r2, r0
 8001876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff5f 	bl	8001740 <__NVIC_SetPriority>
}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	4603      	mov	r3, r0
 8001892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff35 	bl	8001708 <__NVIC_EnableIRQ>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ffa2 	bl	80017f8 <SysTick_Config>
 80018b4:	4603      	mov	r3, r0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018be:	b480      	push	{r7}
 80018c0:	b085      	sub	sp, #20
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d008      	beq.n	80018e8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2204      	movs	r2, #4
 80018da:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e020      	b.n	800192a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 020e 	bic.w	r2, r2, #14
 80018f6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0201 	bic.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001910:	2101      	movs	r1, #1
 8001912:	fa01 f202 	lsl.w	r2, r1, r2
 8001916:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001928:	7bfb      	ldrb	r3, [r7, #15]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d005      	beq.n	8001958 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2204      	movs	r2, #4
 8001950:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	73fb      	strb	r3, [r7, #15]
 8001956:	e051      	b.n	80019fc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 020e 	bic.w	r2, r2, #14
 8001966:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0201 	bic.w	r2, r2, #1
 8001976:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a22      	ldr	r2, [pc, #136]	@ (8001a08 <HAL_DMA_Abort_IT+0xd4>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d029      	beq.n	80019d6 <HAL_DMA_Abort_IT+0xa2>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a21      	ldr	r2, [pc, #132]	@ (8001a0c <HAL_DMA_Abort_IT+0xd8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d022      	beq.n	80019d2 <HAL_DMA_Abort_IT+0x9e>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a1f      	ldr	r2, [pc, #124]	@ (8001a10 <HAL_DMA_Abort_IT+0xdc>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d01a      	beq.n	80019cc <HAL_DMA_Abort_IT+0x98>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a1e      	ldr	r2, [pc, #120]	@ (8001a14 <HAL_DMA_Abort_IT+0xe0>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d012      	beq.n	80019c6 <HAL_DMA_Abort_IT+0x92>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a1c      	ldr	r2, [pc, #112]	@ (8001a18 <HAL_DMA_Abort_IT+0xe4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d00a      	beq.n	80019c0 <HAL_DMA_Abort_IT+0x8c>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a1b      	ldr	r2, [pc, #108]	@ (8001a1c <HAL_DMA_Abort_IT+0xe8>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d102      	bne.n	80019ba <HAL_DMA_Abort_IT+0x86>
 80019b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80019b8:	e00e      	b.n	80019d8 <HAL_DMA_Abort_IT+0xa4>
 80019ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019be:	e00b      	b.n	80019d8 <HAL_DMA_Abort_IT+0xa4>
 80019c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019c4:	e008      	b.n	80019d8 <HAL_DMA_Abort_IT+0xa4>
 80019c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019ca:	e005      	b.n	80019d8 <HAL_DMA_Abort_IT+0xa4>
 80019cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019d0:	e002      	b.n	80019d8 <HAL_DMA_Abort_IT+0xa4>
 80019d2:	2310      	movs	r3, #16
 80019d4:	e000      	b.n	80019d8 <HAL_DMA_Abort_IT+0xa4>
 80019d6:	2301      	movs	r3, #1
 80019d8:	4a11      	ldr	r2, [pc, #68]	@ (8001a20 <HAL_DMA_Abort_IT+0xec>)
 80019da:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	4798      	blx	r3
    } 
  }
  return status;
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40020008 	.word	0x40020008
 8001a0c:	4002001c 	.word	0x4002001c
 8001a10:	40020030 	.word	0x40020030
 8001a14:	40020044 	.word	0x40020044
 8001a18:	40020058 	.word	0x40020058
 8001a1c:	4002006c 	.word	0x4002006c
 8001a20:	40020000 	.word	0x40020000

08001a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b08b      	sub	sp, #44	@ 0x2c
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a36:	e169      	b.n	8001d0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a38:	2201      	movs	r2, #1
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	f040 8158 	bne.w	8001d06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	4a9a      	ldr	r2, [pc, #616]	@ (8001cc4 <HAL_GPIO_Init+0x2a0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d05e      	beq.n	8001b1e <HAL_GPIO_Init+0xfa>
 8001a60:	4a98      	ldr	r2, [pc, #608]	@ (8001cc4 <HAL_GPIO_Init+0x2a0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d875      	bhi.n	8001b52 <HAL_GPIO_Init+0x12e>
 8001a66:	4a98      	ldr	r2, [pc, #608]	@ (8001cc8 <HAL_GPIO_Init+0x2a4>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d058      	beq.n	8001b1e <HAL_GPIO_Init+0xfa>
 8001a6c:	4a96      	ldr	r2, [pc, #600]	@ (8001cc8 <HAL_GPIO_Init+0x2a4>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d86f      	bhi.n	8001b52 <HAL_GPIO_Init+0x12e>
 8001a72:	4a96      	ldr	r2, [pc, #600]	@ (8001ccc <HAL_GPIO_Init+0x2a8>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d052      	beq.n	8001b1e <HAL_GPIO_Init+0xfa>
 8001a78:	4a94      	ldr	r2, [pc, #592]	@ (8001ccc <HAL_GPIO_Init+0x2a8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d869      	bhi.n	8001b52 <HAL_GPIO_Init+0x12e>
 8001a7e:	4a94      	ldr	r2, [pc, #592]	@ (8001cd0 <HAL_GPIO_Init+0x2ac>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d04c      	beq.n	8001b1e <HAL_GPIO_Init+0xfa>
 8001a84:	4a92      	ldr	r2, [pc, #584]	@ (8001cd0 <HAL_GPIO_Init+0x2ac>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d863      	bhi.n	8001b52 <HAL_GPIO_Init+0x12e>
 8001a8a:	4a92      	ldr	r2, [pc, #584]	@ (8001cd4 <HAL_GPIO_Init+0x2b0>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d046      	beq.n	8001b1e <HAL_GPIO_Init+0xfa>
 8001a90:	4a90      	ldr	r2, [pc, #576]	@ (8001cd4 <HAL_GPIO_Init+0x2b0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d85d      	bhi.n	8001b52 <HAL_GPIO_Init+0x12e>
 8001a96:	2b12      	cmp	r3, #18
 8001a98:	d82a      	bhi.n	8001af0 <HAL_GPIO_Init+0xcc>
 8001a9a:	2b12      	cmp	r3, #18
 8001a9c:	d859      	bhi.n	8001b52 <HAL_GPIO_Init+0x12e>
 8001a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8001aa4 <HAL_GPIO_Init+0x80>)
 8001aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa4:	08001b1f 	.word	0x08001b1f
 8001aa8:	08001af9 	.word	0x08001af9
 8001aac:	08001b0b 	.word	0x08001b0b
 8001ab0:	08001b4d 	.word	0x08001b4d
 8001ab4:	08001b53 	.word	0x08001b53
 8001ab8:	08001b53 	.word	0x08001b53
 8001abc:	08001b53 	.word	0x08001b53
 8001ac0:	08001b53 	.word	0x08001b53
 8001ac4:	08001b53 	.word	0x08001b53
 8001ac8:	08001b53 	.word	0x08001b53
 8001acc:	08001b53 	.word	0x08001b53
 8001ad0:	08001b53 	.word	0x08001b53
 8001ad4:	08001b53 	.word	0x08001b53
 8001ad8:	08001b53 	.word	0x08001b53
 8001adc:	08001b53 	.word	0x08001b53
 8001ae0:	08001b53 	.word	0x08001b53
 8001ae4:	08001b53 	.word	0x08001b53
 8001ae8:	08001b01 	.word	0x08001b01
 8001aec:	08001b15 	.word	0x08001b15
 8001af0:	4a79      	ldr	r2, [pc, #484]	@ (8001cd8 <HAL_GPIO_Init+0x2b4>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d013      	beq.n	8001b1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001af6:	e02c      	b.n	8001b52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	623b      	str	r3, [r7, #32]
          break;
 8001afe:	e029      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	3304      	adds	r3, #4
 8001b06:	623b      	str	r3, [r7, #32]
          break;
 8001b08:	e024      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	3308      	adds	r3, #8
 8001b10:	623b      	str	r3, [r7, #32]
          break;
 8001b12:	e01f      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	330c      	adds	r3, #12
 8001b1a:	623b      	str	r3, [r7, #32]
          break;
 8001b1c:	e01a      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d102      	bne.n	8001b2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b26:	2304      	movs	r3, #4
 8001b28:	623b      	str	r3, [r7, #32]
          break;
 8001b2a:	e013      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d105      	bne.n	8001b40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b34:	2308      	movs	r3, #8
 8001b36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69fa      	ldr	r2, [r7, #28]
 8001b3c:	611a      	str	r2, [r3, #16]
          break;
 8001b3e:	e009      	b.n	8001b54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b40:	2308      	movs	r3, #8
 8001b42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69fa      	ldr	r2, [r7, #28]
 8001b48:	615a      	str	r2, [r3, #20]
          break;
 8001b4a:	e003      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	623b      	str	r3, [r7, #32]
          break;
 8001b50:	e000      	b.n	8001b54 <HAL_GPIO_Init+0x130>
          break;
 8001b52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	2bff      	cmp	r3, #255	@ 0xff
 8001b58:	d801      	bhi.n	8001b5e <HAL_GPIO_Init+0x13a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	e001      	b.n	8001b62 <HAL_GPIO_Init+0x13e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3304      	adds	r3, #4
 8001b62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	2bff      	cmp	r3, #255	@ 0xff
 8001b68:	d802      	bhi.n	8001b70 <HAL_GPIO_Init+0x14c>
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	e002      	b.n	8001b76 <HAL_GPIO_Init+0x152>
 8001b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b72:	3b08      	subs	r3, #8
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	210f      	movs	r1, #15
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	fa01 f303 	lsl.w	r3, r1, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	401a      	ands	r2, r3
 8001b88:	6a39      	ldr	r1, [r7, #32]
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b90:	431a      	orrs	r2, r3
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 80b1 	beq.w	8001d06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ba4:	4b4d      	ldr	r3, [pc, #308]	@ (8001cdc <HAL_GPIO_Init+0x2b8>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	4a4c      	ldr	r2, [pc, #304]	@ (8001cdc <HAL_GPIO_Init+0x2b8>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	6193      	str	r3, [r2, #24]
 8001bb0:	4b4a      	ldr	r3, [pc, #296]	@ (8001cdc <HAL_GPIO_Init+0x2b8>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bbc:	4a48      	ldr	r2, [pc, #288]	@ (8001ce0 <HAL_GPIO_Init+0x2bc>)
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc0:	089b      	lsrs	r3, r3, #2
 8001bc2:	3302      	adds	r3, #2
 8001bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a40      	ldr	r2, [pc, #256]	@ (8001ce4 <HAL_GPIO_Init+0x2c0>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d013      	beq.n	8001c10 <HAL_GPIO_Init+0x1ec>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a3f      	ldr	r2, [pc, #252]	@ (8001ce8 <HAL_GPIO_Init+0x2c4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d00d      	beq.n	8001c0c <HAL_GPIO_Init+0x1e8>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a3e      	ldr	r2, [pc, #248]	@ (8001cec <HAL_GPIO_Init+0x2c8>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d007      	beq.n	8001c08 <HAL_GPIO_Init+0x1e4>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a3d      	ldr	r2, [pc, #244]	@ (8001cf0 <HAL_GPIO_Init+0x2cc>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d101      	bne.n	8001c04 <HAL_GPIO_Init+0x1e0>
 8001c00:	2303      	movs	r3, #3
 8001c02:	e006      	b.n	8001c12 <HAL_GPIO_Init+0x1ee>
 8001c04:	2304      	movs	r3, #4
 8001c06:	e004      	b.n	8001c12 <HAL_GPIO_Init+0x1ee>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	e002      	b.n	8001c12 <HAL_GPIO_Init+0x1ee>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <HAL_GPIO_Init+0x1ee>
 8001c10:	2300      	movs	r3, #0
 8001c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c14:	f002 0203 	and.w	r2, r2, #3
 8001c18:	0092      	lsls	r2, r2, #2
 8001c1a:	4093      	lsls	r3, r2
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c22:	492f      	ldr	r1, [pc, #188]	@ (8001ce0 <HAL_GPIO_Init+0x2bc>)
 8001c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c26:	089b      	lsrs	r3, r3, #2
 8001c28:	3302      	adds	r3, #2
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d006      	beq.n	8001c4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	492c      	ldr	r1, [pc, #176]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	608b      	str	r3, [r1, #8]
 8001c48:	e006      	b.n	8001c58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	4928      	ldr	r1, [pc, #160]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d006      	beq.n	8001c72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c64:	4b23      	ldr	r3, [pc, #140]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	4922      	ldr	r1, [pc, #136]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	60cb      	str	r3, [r1, #12]
 8001c70:	e006      	b.n	8001c80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c72:	4b20      	ldr	r3, [pc, #128]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	491e      	ldr	r1, [pc, #120]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d006      	beq.n	8001c9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c8c:	4b19      	ldr	r3, [pc, #100]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	4918      	ldr	r1, [pc, #96]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]
 8001c98:	e006      	b.n	8001ca8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c9a:	4b16      	ldr	r3, [pc, #88]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	4914      	ldr	r1, [pc, #80]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d021      	beq.n	8001cf8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	490e      	ldr	r1, [pc, #56]	@ (8001cf4 <HAL_GPIO_Init+0x2d0>)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	600b      	str	r3, [r1, #0]
 8001cc0:	e021      	b.n	8001d06 <HAL_GPIO_Init+0x2e2>
 8001cc2:	bf00      	nop
 8001cc4:	10320000 	.word	0x10320000
 8001cc8:	10310000 	.word	0x10310000
 8001ccc:	10220000 	.word	0x10220000
 8001cd0:	10210000 	.word	0x10210000
 8001cd4:	10120000 	.word	0x10120000
 8001cd8:	10110000 	.word	0x10110000
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40010000 	.word	0x40010000
 8001ce4:	40010800 	.word	0x40010800
 8001ce8:	40010c00 	.word	0x40010c00
 8001cec:	40011000 	.word	0x40011000
 8001cf0:	40011400 	.word	0x40011400
 8001cf4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <HAL_GPIO_Init+0x304>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	4909      	ldr	r1, [pc, #36]	@ (8001d28 <HAL_GPIO_Init+0x304>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d08:	3301      	adds	r3, #1
 8001d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d12:	fa22 f303 	lsr.w	r3, r2, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f47f ae8e 	bne.w	8001a38 <HAL_GPIO_Init+0x14>
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	372c      	adds	r7, #44	@ 0x2c
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	40010400 	.word	0x40010400

08001d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d3c:	787b      	ldrb	r3, [r7, #1]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d42:	887a      	ldrh	r2, [r7, #2]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d48:	e003      	b.n	8001d52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d4a:	887b      	ldrh	r3, [r7, #2]
 8001d4c:	041a      	lsls	r2, r3, #16
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	611a      	str	r2, [r3, #16]
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d66:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d006      	beq.n	8001d80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d72:	4a05      	ldr	r2, [pc, #20]	@ (8001d88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d74:	88fb      	ldrh	r3, [r7, #6]
 8001d76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 f806 	bl	8001d8c <HAL_GPIO_EXTI_Callback>
  }
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40010400 	.word	0x40010400

08001d8c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr

08001da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e272      	b.n	8002298 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 8087 	beq.w	8001ece <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dc0:	4b92      	ldr	r3, [pc, #584]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 030c 	and.w	r3, r3, #12
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d00c      	beq.n	8001de6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dcc:	4b8f      	ldr	r3, [pc, #572]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 030c 	and.w	r3, r3, #12
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d112      	bne.n	8001dfe <HAL_RCC_OscConfig+0x5e>
 8001dd8:	4b8c      	ldr	r3, [pc, #560]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001de4:	d10b      	bne.n	8001dfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de6:	4b89      	ldr	r3, [pc, #548]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d06c      	beq.n	8001ecc <HAL_RCC_OscConfig+0x12c>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d168      	bne.n	8001ecc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e24c      	b.n	8002298 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x76>
 8001e08:	4b80      	ldr	r3, [pc, #512]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a7f      	ldr	r2, [pc, #508]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	e02e      	b.n	8001e74 <HAL_RCC_OscConfig+0xd4>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x98>
 8001e1e:	4b7b      	ldr	r3, [pc, #492]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a7a      	ldr	r2, [pc, #488]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001e24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	4b78      	ldr	r3, [pc, #480]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a77      	ldr	r2, [pc, #476]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001e30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e01d      	b.n	8001e74 <HAL_RCC_OscConfig+0xd4>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e40:	d10c      	bne.n	8001e5c <HAL_RCC_OscConfig+0xbc>
 8001e42:	4b72      	ldr	r3, [pc, #456]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a71      	ldr	r2, [pc, #452]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001e48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	4b6f      	ldr	r3, [pc, #444]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a6e      	ldr	r2, [pc, #440]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	e00b      	b.n	8001e74 <HAL_RCC_OscConfig+0xd4>
 8001e5c:	4b6b      	ldr	r3, [pc, #428]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a6a      	ldr	r2, [pc, #424]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001e62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b68      	ldr	r3, [pc, #416]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a67      	ldr	r2, [pc, #412]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d013      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7fe ff8c 	bl	8000d98 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e84:	f7fe ff88 	bl	8000d98 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	@ 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e200      	b.n	8002298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e96:	4b5d      	ldr	r3, [pc, #372]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0xe4>
 8001ea2:	e014      	b.n	8001ece <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7fe ff78 	bl	8000d98 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eac:	f7fe ff74 	bl	8000d98 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	@ 0x64
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e1ec      	b.n	8002298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ebe:	4b53      	ldr	r3, [pc, #332]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x10c>
 8001eca:	e000      	b.n	8001ece <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d063      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eda:	4b4c      	ldr	r3, [pc, #304]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00b      	beq.n	8001efe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ee6:	4b49      	ldr	r3, [pc, #292]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 030c 	and.w	r3, r3, #12
 8001eee:	2b08      	cmp	r3, #8
 8001ef0:	d11c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x18c>
 8001ef2:	4b46      	ldr	r3, [pc, #280]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d116      	bne.n	8001f2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efe:	4b43      	ldr	r3, [pc, #268]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d005      	beq.n	8001f16 <HAL_RCC_OscConfig+0x176>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d001      	beq.n	8001f16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e1c0      	b.n	8002298 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f16:	4b3d      	ldr	r3, [pc, #244]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4939      	ldr	r1, [pc, #228]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2a:	e03a      	b.n	8001fa2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d020      	beq.n	8001f76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f34:	4b36      	ldr	r3, [pc, #216]	@ (8002010 <HAL_RCC_OscConfig+0x270>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3a:	f7fe ff2d 	bl	8000d98 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f42:	f7fe ff29 	bl	8000d98 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e1a1      	b.n	8002298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f54:	4b2d      	ldr	r3, [pc, #180]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0f0      	beq.n	8001f42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f60:	4b2a      	ldr	r3, [pc, #168]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4927      	ldr	r1, [pc, #156]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	600b      	str	r3, [r1, #0]
 8001f74:	e015      	b.n	8001fa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f76:	4b26      	ldr	r3, [pc, #152]	@ (8002010 <HAL_RCC_OscConfig+0x270>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7fe ff0c 	bl	8000d98 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f84:	f7fe ff08 	bl	8000d98 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e180      	b.n	8002298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f96:	4b1d      	ldr	r3, [pc, #116]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d03a      	beq.n	8002024 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d019      	beq.n	8001fea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb6:	4b17      	ldr	r3, [pc, #92]	@ (8002014 <HAL_RCC_OscConfig+0x274>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fbc:	f7fe feec 	bl	8000d98 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc4:	f7fe fee8 	bl	8000d98 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e160      	b.n	8002298 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800200c <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0f0      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fe2:	2001      	movs	r0, #1
 8001fe4:	f000 face 	bl	8002584 <RCC_Delay>
 8001fe8:	e01c      	b.n	8002024 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fea:	4b0a      	ldr	r3, [pc, #40]	@ (8002014 <HAL_RCC_OscConfig+0x274>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff0:	f7fe fed2 	bl	8000d98 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff6:	e00f      	b.n	8002018 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff8:	f7fe fece 	bl	8000d98 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d908      	bls.n	8002018 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e146      	b.n	8002298 <HAL_RCC_OscConfig+0x4f8>
 800200a:	bf00      	nop
 800200c:	40021000 	.word	0x40021000
 8002010:	42420000 	.word	0x42420000
 8002014:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002018:	4b92      	ldr	r3, [pc, #584]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 800201a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1e9      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 80a6 	beq.w	800217e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002032:	2300      	movs	r3, #0
 8002034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002036:	4b8b      	ldr	r3, [pc, #556]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10d      	bne.n	800205e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002042:	4b88      	ldr	r3, [pc, #544]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	4a87      	ldr	r2, [pc, #540]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800204c:	61d3      	str	r3, [r2, #28]
 800204e:	4b85      	ldr	r3, [pc, #532]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800205a:	2301      	movs	r3, #1
 800205c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205e:	4b82      	ldr	r3, [pc, #520]	@ (8002268 <HAL_RCC_OscConfig+0x4c8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002066:	2b00      	cmp	r3, #0
 8002068:	d118      	bne.n	800209c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800206a:	4b7f      	ldr	r3, [pc, #508]	@ (8002268 <HAL_RCC_OscConfig+0x4c8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a7e      	ldr	r2, [pc, #504]	@ (8002268 <HAL_RCC_OscConfig+0x4c8>)
 8002070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002076:	f7fe fe8f 	bl	8000d98 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207e:	f7fe fe8b 	bl	8000d98 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b64      	cmp	r3, #100	@ 0x64
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e103      	b.n	8002298 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002090:	4b75      	ldr	r3, [pc, #468]	@ (8002268 <HAL_RCC_OscConfig+0x4c8>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d106      	bne.n	80020b2 <HAL_RCC_OscConfig+0x312>
 80020a4:	4b6f      	ldr	r3, [pc, #444]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	4a6e      	ldr	r2, [pc, #440]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	6213      	str	r3, [r2, #32]
 80020b0:	e02d      	b.n	800210e <HAL_RCC_OscConfig+0x36e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x334>
 80020ba:	4b6a      	ldr	r3, [pc, #424]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	4a69      	ldr	r2, [pc, #420]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	f023 0301 	bic.w	r3, r3, #1
 80020c4:	6213      	str	r3, [r2, #32]
 80020c6:	4b67      	ldr	r3, [pc, #412]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	4a66      	ldr	r2, [pc, #408]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	f023 0304 	bic.w	r3, r3, #4
 80020d0:	6213      	str	r3, [r2, #32]
 80020d2:	e01c      	b.n	800210e <HAL_RCC_OscConfig+0x36e>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	2b05      	cmp	r3, #5
 80020da:	d10c      	bne.n	80020f6 <HAL_RCC_OscConfig+0x356>
 80020dc:	4b61      	ldr	r3, [pc, #388]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	4a60      	ldr	r2, [pc, #384]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 80020e2:	f043 0304 	orr.w	r3, r3, #4
 80020e6:	6213      	str	r3, [r2, #32]
 80020e8:	4b5e      	ldr	r3, [pc, #376]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	4a5d      	ldr	r2, [pc, #372]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	6213      	str	r3, [r2, #32]
 80020f4:	e00b      	b.n	800210e <HAL_RCC_OscConfig+0x36e>
 80020f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	4a5a      	ldr	r2, [pc, #360]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	f023 0301 	bic.w	r3, r3, #1
 8002100:	6213      	str	r3, [r2, #32]
 8002102:	4b58      	ldr	r3, [pc, #352]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	4a57      	ldr	r2, [pc, #348]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 8002108:	f023 0304 	bic.w	r3, r3, #4
 800210c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d015      	beq.n	8002142 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002116:	f7fe fe3f 	bl	8000d98 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211c:	e00a      	b.n	8002134 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800211e:	f7fe fe3b 	bl	8000d98 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800212c:	4293      	cmp	r3, r2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e0b1      	b.n	8002298 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002134:	4b4b      	ldr	r3, [pc, #300]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0ee      	beq.n	800211e <HAL_RCC_OscConfig+0x37e>
 8002140:	e014      	b.n	800216c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002142:	f7fe fe29 	bl	8000d98 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002148:	e00a      	b.n	8002160 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214a:	f7fe fe25 	bl	8000d98 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002158:	4293      	cmp	r3, r2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e09b      	b.n	8002298 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002160:	4b40      	ldr	r3, [pc, #256]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1ee      	bne.n	800214a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800216c:	7dfb      	ldrb	r3, [r7, #23]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d105      	bne.n	800217e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002172:	4b3c      	ldr	r3, [pc, #240]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	4a3b      	ldr	r2, [pc, #236]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800217c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 8087 	beq.w	8002296 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002188:	4b36      	ldr	r3, [pc, #216]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 030c 	and.w	r3, r3, #12
 8002190:	2b08      	cmp	r3, #8
 8002192:	d061      	beq.n	8002258 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69db      	ldr	r3, [r3, #28]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d146      	bne.n	800222a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800219c:	4b33      	ldr	r3, [pc, #204]	@ (800226c <HAL_RCC_OscConfig+0x4cc>)
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a2:	f7fe fdf9 	bl	8000d98 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021aa:	f7fe fdf5 	bl	8000d98 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e06d      	b.n	8002298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021bc:	4b29      	ldr	r3, [pc, #164]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1f0      	bne.n	80021aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021d0:	d108      	bne.n	80021e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021d2:	4b24      	ldr	r3, [pc, #144]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	4921      	ldr	r1, [pc, #132]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a19      	ldr	r1, [r3, #32]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f4:	430b      	orrs	r3, r1
 80021f6:	491b      	ldr	r1, [pc, #108]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021fc:	4b1b      	ldr	r3, [pc, #108]	@ (800226c <HAL_RCC_OscConfig+0x4cc>)
 80021fe:	2201      	movs	r2, #1
 8002200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002202:	f7fe fdc9 	bl	8000d98 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220a:	f7fe fdc5 	bl	8000d98 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e03d      	b.n	8002298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800221c:	4b11      	ldr	r3, [pc, #68]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x46a>
 8002228:	e035      	b.n	8002296 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222a:	4b10      	ldr	r3, [pc, #64]	@ (800226c <HAL_RCC_OscConfig+0x4cc>)
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7fe fdb2 	bl	8000d98 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002238:	f7fe fdae 	bl	8000d98 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e026      	b.n	8002298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800224a:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <HAL_RCC_OscConfig+0x4c4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x498>
 8002256:	e01e      	b.n	8002296 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d107      	bne.n	8002270 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e019      	b.n	8002298 <HAL_RCC_OscConfig+0x4f8>
 8002264:	40021000 	.word	0x40021000
 8002268:	40007000 	.word	0x40007000
 800226c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002270:	4b0b      	ldr	r3, [pc, #44]	@ (80022a0 <HAL_RCC_OscConfig+0x500>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	429a      	cmp	r2, r3
 8002282:	d106      	bne.n	8002292 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228e:	429a      	cmp	r2, r3
 8002290:	d001      	beq.n	8002296 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40021000 	.word	0x40021000

080022a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0d0      	b.n	800245a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022b8:	4b6a      	ldr	r3, [pc, #424]	@ (8002464 <HAL_RCC_ClockConfig+0x1c0>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d910      	bls.n	80022e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c6:	4b67      	ldr	r3, [pc, #412]	@ (8002464 <HAL_RCC_ClockConfig+0x1c0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 0207 	bic.w	r2, r3, #7
 80022ce:	4965      	ldr	r1, [pc, #404]	@ (8002464 <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d6:	4b63      	ldr	r3, [pc, #396]	@ (8002464 <HAL_RCC_ClockConfig+0x1c0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0b8      	b.n	800245a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d020      	beq.n	8002336 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002300:	4b59      	ldr	r3, [pc, #356]	@ (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	4a58      	ldr	r2, [pc, #352]	@ (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800230a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002318:	4b53      	ldr	r3, [pc, #332]	@ (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	4a52      	ldr	r2, [pc, #328]	@ (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002322:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002324:	4b50      	ldr	r3, [pc, #320]	@ (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	494d      	ldr	r1, [pc, #308]	@ (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	4313      	orrs	r3, r2
 8002334:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d040      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234a:	4b47      	ldr	r3, [pc, #284]	@ (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d115      	bne.n	8002382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e07f      	b.n	800245a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d107      	bne.n	8002372 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002362:	4b41      	ldr	r3, [pc, #260]	@ (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d109      	bne.n	8002382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e073      	b.n	800245a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002372:	4b3d      	ldr	r3, [pc, #244]	@ (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e06b      	b.n	800245a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002382:	4b39      	ldr	r3, [pc, #228]	@ (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f023 0203 	bic.w	r2, r3, #3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4936      	ldr	r1, [pc, #216]	@ (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	4313      	orrs	r3, r2
 8002392:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002394:	f7fe fd00 	bl	8000d98 <HAL_GetTick>
 8002398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239a:	e00a      	b.n	80023b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800239c:	f7fe fcfc 	bl	8000d98 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e053      	b.n	800245a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 020c 	and.w	r2, r3, #12
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d1eb      	bne.n	800239c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023c4:	4b27      	ldr	r3, [pc, #156]	@ (8002464 <HAL_RCC_ClockConfig+0x1c0>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d210      	bcs.n	80023f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d2:	4b24      	ldr	r3, [pc, #144]	@ (8002464 <HAL_RCC_ClockConfig+0x1c0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f023 0207 	bic.w	r2, r3, #7
 80023da:	4922      	ldr	r1, [pc, #136]	@ (8002464 <HAL_RCC_ClockConfig+0x1c0>)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	4313      	orrs	r3, r2
 80023e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e2:	4b20      	ldr	r3, [pc, #128]	@ (8002464 <HAL_RCC_ClockConfig+0x1c0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d001      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e032      	b.n	800245a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d008      	beq.n	8002412 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002400:	4b19      	ldr	r3, [pc, #100]	@ (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4916      	ldr	r1, [pc, #88]	@ (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 800240e:	4313      	orrs	r3, r2
 8002410:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d009      	beq.n	8002432 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800241e:	4b12      	ldr	r3, [pc, #72]	@ (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	490e      	ldr	r1, [pc, #56]	@ (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 800242e:	4313      	orrs	r3, r2
 8002430:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002432:	f000 f821 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 8002436:	4602      	mov	r2, r0
 8002438:	4b0b      	ldr	r3, [pc, #44]	@ (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	490a      	ldr	r1, [pc, #40]	@ (800246c <HAL_RCC_ClockConfig+0x1c8>)
 8002444:	5ccb      	ldrb	r3, [r1, r3]
 8002446:	fa22 f303 	lsr.w	r3, r2, r3
 800244a:	4a09      	ldr	r2, [pc, #36]	@ (8002470 <HAL_RCC_ClockConfig+0x1cc>)
 800244c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800244e:	4b09      	ldr	r3, [pc, #36]	@ (8002474 <HAL_RCC_ClockConfig+0x1d0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fc5e 	bl	8000d14 <HAL_InitTick>

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40022000 	.word	0x40022000
 8002468:	40021000 	.word	0x40021000
 800246c:	080051d8 	.word	0x080051d8
 8002470:	20000008 	.word	0x20000008
 8002474:	2000000c 	.word	0x2000000c

08002478 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002478:	b480      	push	{r7}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	2300      	movs	r3, #0
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	2300      	movs	r3, #0
 800248c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800248e:	2300      	movs	r3, #0
 8002490:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002492:	4b1e      	ldr	r3, [pc, #120]	@ (800250c <HAL_RCC_GetSysClockFreq+0x94>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 030c 	and.w	r3, r3, #12
 800249e:	2b04      	cmp	r3, #4
 80024a0:	d002      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x30>
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d003      	beq.n	80024ae <HAL_RCC_GetSysClockFreq+0x36>
 80024a6:	e027      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024a8:	4b19      	ldr	r3, [pc, #100]	@ (8002510 <HAL_RCC_GetSysClockFreq+0x98>)
 80024aa:	613b      	str	r3, [r7, #16]
      break;
 80024ac:	e027      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	0c9b      	lsrs	r3, r3, #18
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	4a17      	ldr	r2, [pc, #92]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024b8:	5cd3      	ldrb	r3, [r2, r3]
 80024ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d010      	beq.n	80024e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024c6:	4b11      	ldr	r3, [pc, #68]	@ (800250c <HAL_RCC_GetSysClockFreq+0x94>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	0c5b      	lsrs	r3, r3, #17
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	4a11      	ldr	r2, [pc, #68]	@ (8002518 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024d2:	5cd3      	ldrb	r3, [r2, r3]
 80024d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002510 <HAL_RCC_GetSysClockFreq+0x98>)
 80024da:	fb03 f202 	mul.w	r2, r3, r2
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	e004      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a0c      	ldr	r2, [pc, #48]	@ (800251c <HAL_RCC_GetSysClockFreq+0xa4>)
 80024ec:	fb02 f303 	mul.w	r3, r2, r3
 80024f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	613b      	str	r3, [r7, #16]
      break;
 80024f6:	e002      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024f8:	4b05      	ldr	r3, [pc, #20]	@ (8002510 <HAL_RCC_GetSysClockFreq+0x98>)
 80024fa:	613b      	str	r3, [r7, #16]
      break;
 80024fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024fe:	693b      	ldr	r3, [r7, #16]
}
 8002500:	4618      	mov	r0, r3
 8002502:	371c      	adds	r7, #28
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000
 8002510:	007a1200 	.word	0x007a1200
 8002514:	080051f0 	.word	0x080051f0
 8002518:	08005200 	.word	0x08005200
 800251c:	003d0900 	.word	0x003d0900

08002520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002524:	4b02      	ldr	r3, [pc, #8]	@ (8002530 <HAL_RCC_GetHCLKFreq+0x10>)
 8002526:	681b      	ldr	r3, [r3, #0]
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	20000008 	.word	0x20000008

08002534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002538:	f7ff fff2 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 800253c:	4602      	mov	r2, r0
 800253e:	4b05      	ldr	r3, [pc, #20]	@ (8002554 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	0a1b      	lsrs	r3, r3, #8
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	4903      	ldr	r1, [pc, #12]	@ (8002558 <HAL_RCC_GetPCLK1Freq+0x24>)
 800254a:	5ccb      	ldrb	r3, [r1, r3]
 800254c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002550:	4618      	mov	r0, r3
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40021000 	.word	0x40021000
 8002558:	080051e8 	.word	0x080051e8

0800255c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002560:	f7ff ffde 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 8002564:	4602      	mov	r2, r0
 8002566:	4b05      	ldr	r3, [pc, #20]	@ (800257c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	0adb      	lsrs	r3, r3, #11
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	4903      	ldr	r1, [pc, #12]	@ (8002580 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002572:	5ccb      	ldrb	r3, [r1, r3]
 8002574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002578:	4618      	mov	r0, r3
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000
 8002580:	080051e8 	.word	0x080051e8

08002584 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800258c:	4b0a      	ldr	r3, [pc, #40]	@ (80025b8 <RCC_Delay+0x34>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a0a      	ldr	r2, [pc, #40]	@ (80025bc <RCC_Delay+0x38>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	0a5b      	lsrs	r3, r3, #9
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	fb02 f303 	mul.w	r3, r2, r3
 800259e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025a0:	bf00      	nop
  }
  while (Delay --);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1e5a      	subs	r2, r3, #1
 80025a6:	60fa      	str	r2, [r7, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1f9      	bne.n	80025a0 <RCC_Delay+0x1c>
}
 80025ac:	bf00      	nop
 80025ae:	bf00      	nop
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr
 80025b8:	20000008 	.word	0x20000008
 80025bc:	10624dd3 	.word	0x10624dd3

080025c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d07d      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80025dc:	2300      	movs	r3, #0
 80025de:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025e0:	4b4f      	ldr	r3, [pc, #316]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10d      	bne.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ec:	4b4c      	ldr	r3, [pc, #304]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	4a4b      	ldr	r2, [pc, #300]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025f6:	61d3      	str	r3, [r2, #28]
 80025f8:	4b49      	ldr	r3, [pc, #292]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002604:	2301      	movs	r3, #1
 8002606:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002608:	4b46      	ldr	r3, [pc, #280]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002610:	2b00      	cmp	r3, #0
 8002612:	d118      	bne.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002614:	4b43      	ldr	r3, [pc, #268]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a42      	ldr	r2, [pc, #264]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800261a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800261e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002620:	f7fe fbba 	bl	8000d98 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002626:	e008      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002628:	f7fe fbb6 	bl	8000d98 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	@ 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e06d      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263a:	4b3a      	ldr	r3, [pc, #232]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002646:	4b36      	ldr	r3, [pc, #216]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800264e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d02e      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	429a      	cmp	r2, r3
 8002662:	d027      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002664:	4b2e      	ldr	r3, [pc, #184]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800266c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800266e:	4b2e      	ldr	r3, [pc, #184]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002670:	2201      	movs	r2, #1
 8002672:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002674:	4b2c      	ldr	r3, [pc, #176]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800267a:	4a29      	ldr	r2, [pc, #164]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d014      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268a:	f7fe fb85 	bl	8000d98 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002690:	e00a      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002692:	f7fe fb81 	bl	8000d98 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e036      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0ee      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	4917      	ldr	r1, [pc, #92]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026c6:	7dfb      	ldrb	r3, [r7, #23]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d105      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026cc:	4b14      	ldr	r3, [pc, #80]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	4a13      	ldr	r2, [pc, #76]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	490b      	ldr	r1, [pc, #44]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d008      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002702:	4b07      	ldr	r3, [pc, #28]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	4904      	ldr	r1, [pc, #16]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002710:	4313      	orrs	r3, r2
 8002712:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000
 8002724:	40007000 	.word	0x40007000
 8002728:	42420440 	.word	0x42420440

0800272c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b088      	sub	sp, #32
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
 800273c:	2300      	movs	r3, #0
 800273e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	2300      	movs	r3, #0
 8002746:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b10      	cmp	r3, #16
 800274c:	d00a      	beq.n	8002764 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b10      	cmp	r3, #16
 8002752:	f200 808a 	bhi.w	800286a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d045      	beq.n	80027e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d075      	beq.n	800284e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002762:	e082      	b.n	800286a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002764:	4b46      	ldr	r3, [pc, #280]	@ (8002880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800276a:	4b45      	ldr	r3, [pc, #276]	@ (8002880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d07b      	beq.n	800286e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	0c9b      	lsrs	r3, r3, #18
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	4a41      	ldr	r2, [pc, #260]	@ (8002884 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002780:	5cd3      	ldrb	r3, [r2, r3]
 8002782:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d015      	beq.n	80027ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800278e:	4b3c      	ldr	r3, [pc, #240]	@ (8002880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	0c5b      	lsrs	r3, r3, #17
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	4a3b      	ldr	r2, [pc, #236]	@ (8002888 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800279a:	5cd3      	ldrb	r3, [r2, r3]
 800279c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00d      	beq.n	80027c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80027a8:	4a38      	ldr	r2, [pc, #224]	@ (800288c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	fb02 f303 	mul.w	r3, r2, r3
 80027b6:	61fb      	str	r3, [r7, #28]
 80027b8:	e004      	b.n	80027c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4a34      	ldr	r2, [pc, #208]	@ (8002890 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80027be:	fb02 f303 	mul.w	r3, r2, r3
 80027c2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80027c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027d0:	d102      	bne.n	80027d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	61bb      	str	r3, [r7, #24]
      break;
 80027d6:	e04a      	b.n	800286e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	4a2d      	ldr	r2, [pc, #180]	@ (8002894 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80027de:	fba2 2303 	umull	r2, r3, r2, r3
 80027e2:	085b      	lsrs	r3, r3, #1
 80027e4:	61bb      	str	r3, [r7, #24]
      break;
 80027e6:	e042      	b.n	800286e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80027e8:	4b25      	ldr	r3, [pc, #148]	@ (8002880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027f8:	d108      	bne.n	800280c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002804:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	e01f      	b.n	800284c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002812:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002816:	d109      	bne.n	800282c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002818:	4b19      	ldr	r3, [pc, #100]	@ (8002880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800281a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002824:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002828:	61bb      	str	r3, [r7, #24]
 800282a:	e00f      	b.n	800284c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002832:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002836:	d11c      	bne.n	8002872 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002838:	4b11      	ldr	r3, [pc, #68]	@ (8002880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d016      	beq.n	8002872 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002844:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002848:	61bb      	str	r3, [r7, #24]
      break;
 800284a:	e012      	b.n	8002872 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800284c:	e011      	b.n	8002872 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800284e:	f7ff fe85 	bl	800255c <HAL_RCC_GetPCLK2Freq>
 8002852:	4602      	mov	r2, r0
 8002854:	4b0a      	ldr	r3, [pc, #40]	@ (8002880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	0b9b      	lsrs	r3, r3, #14
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	3301      	adds	r3, #1
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	fbb2 f3f3 	udiv	r3, r2, r3
 8002866:	61bb      	str	r3, [r7, #24]
      break;
 8002868:	e004      	b.n	8002874 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800286a:	bf00      	nop
 800286c:	e002      	b.n	8002874 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800286e:	bf00      	nop
 8002870:	e000      	b.n	8002874 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002872:	bf00      	nop
    }
  }
  return (frequency);
 8002874:	69bb      	ldr	r3, [r7, #24]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3720      	adds	r7, #32
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000
 8002884:	08005204 	.word	0x08005204
 8002888:	08005214 	.word	0x08005214
 800288c:	007a1200 	.word	0x007a1200
 8002890:	003d0900 	.word	0x003d0900
 8002894:	aaaaaaab 	.word	0xaaaaaaab

08002898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e041      	b.n	800292e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7fe f87a 	bl	80009b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3304      	adds	r3, #4
 80028d4:	4619      	mov	r1, r3
 80028d6:	4610      	mov	r0, r2
 80028d8:	f000 fb86 	bl	8002fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b01      	cmp	r3, #1
 800294a:	d001      	beq.n	8002950 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e032      	b.n	80029b6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a18      	ldr	r2, [pc, #96]	@ (80029c0 <HAL_TIM_Base_Start+0x88>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00e      	beq.n	8002980 <HAL_TIM_Base_Start+0x48>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800296a:	d009      	beq.n	8002980 <HAL_TIM_Base_Start+0x48>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a14      	ldr	r2, [pc, #80]	@ (80029c4 <HAL_TIM_Base_Start+0x8c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d004      	beq.n	8002980 <HAL_TIM_Base_Start+0x48>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a13      	ldr	r2, [pc, #76]	@ (80029c8 <HAL_TIM_Base_Start+0x90>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d111      	bne.n	80029a4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b06      	cmp	r3, #6
 8002990:	d010      	beq.n	80029b4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f042 0201 	orr.w	r2, r2, #1
 80029a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a2:	e007      	b.n	80029b4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr
 80029c0:	40012c00 	.word	0x40012c00
 80029c4:	40000400 	.word	0x40000400
 80029c8:	40000800 	.word	0x40000800

080029cc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6a1a      	ldr	r2, [r3, #32]
 80029da:	f241 1311 	movw	r3, #4369	@ 0x1111
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10f      	bne.n	8002a04 <HAL_TIM_Base_Stop+0x38>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6a1a      	ldr	r2, [r3, #32]
 80029ea:	f240 4344 	movw	r3, #1092	@ 0x444
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d107      	bne.n	8002a04 <HAL_TIM_Base_Stop+0x38>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0201 	bic.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr

08002a18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e041      	b.n	8002aae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f839 	bl	8002ab6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3304      	adds	r3, #4
 8002a54:	4619      	mov	r1, r3
 8002a56:	4610      	mov	r0, r2
 8002a58:	f000 fac6 	bl	8002fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d109      	bne.n	8002aec <HAL_TIM_PWM_Start+0x24>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	bf14      	ite	ne
 8002ae4:	2301      	movne	r3, #1
 8002ae6:	2300      	moveq	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	e022      	b.n	8002b32 <HAL_TIM_PWM_Start+0x6a>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d109      	bne.n	8002b06 <HAL_TIM_PWM_Start+0x3e>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	bf14      	ite	ne
 8002afe:	2301      	movne	r3, #1
 8002b00:	2300      	moveq	r3, #0
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	e015      	b.n	8002b32 <HAL_TIM_PWM_Start+0x6a>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d109      	bne.n	8002b20 <HAL_TIM_PWM_Start+0x58>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	bf14      	ite	ne
 8002b18:	2301      	movne	r3, #1
 8002b1a:	2300      	moveq	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	e008      	b.n	8002b32 <HAL_TIM_PWM_Start+0x6a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	bf14      	ite	ne
 8002b2c:	2301      	movne	r3, #1
 8002b2e:	2300      	moveq	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e05e      	b.n	8002bf8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d104      	bne.n	8002b4a <HAL_TIM_PWM_Start+0x82>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b48:	e013      	b.n	8002b72 <HAL_TIM_PWM_Start+0xaa>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d104      	bne.n	8002b5a <HAL_TIM_PWM_Start+0x92>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b58:	e00b      	b.n	8002b72 <HAL_TIM_PWM_Start+0xaa>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d104      	bne.n	8002b6a <HAL_TIM_PWM_Start+0xa2>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b68:	e003      	b.n	8002b72 <HAL_TIM_PWM_Start+0xaa>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2201      	movs	r2, #1
 8002b78:	6839      	ldr	r1, [r7, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fcc0 	bl	8003500 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a1e      	ldr	r2, [pc, #120]	@ (8002c00 <HAL_TIM_PWM_Start+0x138>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d107      	bne.n	8002b9a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b98:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a18      	ldr	r2, [pc, #96]	@ (8002c00 <HAL_TIM_PWM_Start+0x138>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d00e      	beq.n	8002bc2 <HAL_TIM_PWM_Start+0xfa>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bac:	d009      	beq.n	8002bc2 <HAL_TIM_PWM_Start+0xfa>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a14      	ldr	r2, [pc, #80]	@ (8002c04 <HAL_TIM_PWM_Start+0x13c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d004      	beq.n	8002bc2 <HAL_TIM_PWM_Start+0xfa>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a12      	ldr	r2, [pc, #72]	@ (8002c08 <HAL_TIM_PWM_Start+0x140>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d111      	bne.n	8002be6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2b06      	cmp	r3, #6
 8002bd2:	d010      	beq.n	8002bf6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be4:	e007      	b.n	8002bf6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 0201 	orr.w	r2, r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40012c00 	.word	0x40012c00
 8002c04:	40000400 	.word	0x40000400
 8002c08:	40000800 	.word	0x40000800

08002c0c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	6839      	ldr	r1, [r7, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 fc6e 	bl	8003500 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a29      	ldr	r2, [pc, #164]	@ (8002cd0 <HAL_TIM_PWM_Stop+0xc4>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d117      	bne.n	8002c5e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6a1a      	ldr	r2, [r3, #32]
 8002c34:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002c38:	4013      	ands	r3, r2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10f      	bne.n	8002c5e <HAL_TIM_PWM_Stop+0x52>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6a1a      	ldr	r2, [r3, #32]
 8002c44:	f240 4344 	movw	r3, #1092	@ 0x444
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d107      	bne.n	8002c5e <HAL_TIM_PWM_Stop+0x52>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6a1a      	ldr	r2, [r3, #32]
 8002c64:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10f      	bne.n	8002c8e <HAL_TIM_PWM_Stop+0x82>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6a1a      	ldr	r2, [r3, #32]
 8002c74:	f240 4344 	movw	r3, #1092	@ 0x444
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d107      	bne.n	8002c8e <HAL_TIM_PWM_Stop+0x82>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0201 	bic.w	r2, r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d104      	bne.n	8002c9e <HAL_TIM_PWM_Stop+0x92>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c9c:	e013      	b.n	8002cc6 <HAL_TIM_PWM_Stop+0xba>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d104      	bne.n	8002cae <HAL_TIM_PWM_Stop+0xa2>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cac:	e00b      	b.n	8002cc6 <HAL_TIM_PWM_Stop+0xba>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d104      	bne.n	8002cbe <HAL_TIM_PWM_Stop+0xb2>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cbc:	e003      	b.n	8002cc6 <HAL_TIM_PWM_Stop+0xba>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40012c00 	.word	0x40012c00

08002cd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e0ae      	b.n	8002e50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b0c      	cmp	r3, #12
 8002cfe:	f200 809f 	bhi.w	8002e40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002d02:	a201      	add	r2, pc, #4	@ (adr r2, 8002d08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d08:	08002d3d 	.word	0x08002d3d
 8002d0c:	08002e41 	.word	0x08002e41
 8002d10:	08002e41 	.word	0x08002e41
 8002d14:	08002e41 	.word	0x08002e41
 8002d18:	08002d7d 	.word	0x08002d7d
 8002d1c:	08002e41 	.word	0x08002e41
 8002d20:	08002e41 	.word	0x08002e41
 8002d24:	08002e41 	.word	0x08002e41
 8002d28:	08002dbf 	.word	0x08002dbf
 8002d2c:	08002e41 	.word	0x08002e41
 8002d30:	08002e41 	.word	0x08002e41
 8002d34:	08002e41 	.word	0x08002e41
 8002d38:	08002dff 	.word	0x08002dff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 f9be 	bl	80030c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699a      	ldr	r2, [r3, #24]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0208 	orr.w	r2, r2, #8
 8002d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699a      	ldr	r2, [r3, #24]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0204 	bic.w	r2, r2, #4
 8002d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6999      	ldr	r1, [r3, #24]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	691a      	ldr	r2, [r3, #16]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	619a      	str	r2, [r3, #24]
      break;
 8002d7a:	e064      	b.n	8002e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68b9      	ldr	r1, [r7, #8]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fa04 	bl	8003190 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699a      	ldr	r2, [r3, #24]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699a      	ldr	r2, [r3, #24]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6999      	ldr	r1, [r3, #24]
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	021a      	lsls	r2, r3, #8
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	619a      	str	r2, [r3, #24]
      break;
 8002dbc:	e043      	b.n	8002e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68b9      	ldr	r1, [r7, #8]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fa4d 	bl	8003264 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	69da      	ldr	r2, [r3, #28]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f042 0208 	orr.w	r2, r2, #8
 8002dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	69da      	ldr	r2, [r3, #28]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0204 	bic.w	r2, r2, #4
 8002de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	69d9      	ldr	r1, [r3, #28]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	61da      	str	r2, [r3, #28]
      break;
 8002dfc:	e023      	b.n	8002e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68b9      	ldr	r1, [r7, #8]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 fa97 	bl	8003338 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	69da      	ldr	r2, [r3, #28]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	69da      	ldr	r2, [r3, #28]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69d9      	ldr	r1, [r3, #28]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	021a      	lsls	r2, r3, #8
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	61da      	str	r2, [r3, #28]
      break;
 8002e3e:	e002      	b.n	8002e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	75fb      	strb	r3, [r7, #23]
      break;
 8002e44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_TIM_ConfigClockSource+0x1c>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e0b4      	b.n	8002fde <HAL_TIM_ConfigClockSource+0x186>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002e92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002eac:	d03e      	beq.n	8002f2c <HAL_TIM_ConfigClockSource+0xd4>
 8002eae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002eb2:	f200 8087 	bhi.w	8002fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002eb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eba:	f000 8086 	beq.w	8002fca <HAL_TIM_ConfigClockSource+0x172>
 8002ebe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ec2:	d87f      	bhi.n	8002fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ec4:	2b70      	cmp	r3, #112	@ 0x70
 8002ec6:	d01a      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0xa6>
 8002ec8:	2b70      	cmp	r3, #112	@ 0x70
 8002eca:	d87b      	bhi.n	8002fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ecc:	2b60      	cmp	r3, #96	@ 0x60
 8002ece:	d050      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0x11a>
 8002ed0:	2b60      	cmp	r3, #96	@ 0x60
 8002ed2:	d877      	bhi.n	8002fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed4:	2b50      	cmp	r3, #80	@ 0x50
 8002ed6:	d03c      	beq.n	8002f52 <HAL_TIM_ConfigClockSource+0xfa>
 8002ed8:	2b50      	cmp	r3, #80	@ 0x50
 8002eda:	d873      	bhi.n	8002fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002edc:	2b40      	cmp	r3, #64	@ 0x40
 8002ede:	d058      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0x13a>
 8002ee0:	2b40      	cmp	r3, #64	@ 0x40
 8002ee2:	d86f      	bhi.n	8002fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee4:	2b30      	cmp	r3, #48	@ 0x30
 8002ee6:	d064      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8002ee8:	2b30      	cmp	r3, #48	@ 0x30
 8002eea:	d86b      	bhi.n	8002fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	d060      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	d867      	bhi.n	8002fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d05c      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8002ef8:	2b10      	cmp	r3, #16
 8002efa:	d05a      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8002efc:	e062      	b.n	8002fc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f0e:	f000 fad8 	bl	80034c2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002f20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	609a      	str	r2, [r3, #8]
      break;
 8002f2a:	e04f      	b.n	8002fcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f3c:	f000 fac1 	bl	80034c2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f4e:	609a      	str	r2, [r3, #8]
      break;
 8002f50:	e03c      	b.n	8002fcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f000 fa38 	bl	80033d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2150      	movs	r1, #80	@ 0x50
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fa8f 	bl	800348e <TIM_ITRx_SetConfig>
      break;
 8002f70:	e02c      	b.n	8002fcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f000 fa56 	bl	8003430 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2160      	movs	r1, #96	@ 0x60
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fa7f 	bl	800348e <TIM_ITRx_SetConfig>
      break;
 8002f90:	e01c      	b.n	8002fcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f000 fa18 	bl	80033d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2140      	movs	r1, #64	@ 0x40
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fa6f 	bl	800348e <TIM_ITRx_SetConfig>
      break;
 8002fb0:	e00c      	b.n	8002fcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	f000 fa66 	bl	800348e <TIM_ITRx_SetConfig>
      break;
 8002fc2:	e003      	b.n	8002fcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fc8:	e000      	b.n	8002fcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a2f      	ldr	r2, [pc, #188]	@ (80030b8 <TIM_Base_SetConfig+0xd0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00b      	beq.n	8003018 <TIM_Base_SetConfig+0x30>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003006:	d007      	beq.n	8003018 <TIM_Base_SetConfig+0x30>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a2c      	ldr	r2, [pc, #176]	@ (80030bc <TIM_Base_SetConfig+0xd4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d003      	beq.n	8003018 <TIM_Base_SetConfig+0x30>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a2b      	ldr	r2, [pc, #172]	@ (80030c0 <TIM_Base_SetConfig+0xd8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d108      	bne.n	800302a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800301e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a22      	ldr	r2, [pc, #136]	@ (80030b8 <TIM_Base_SetConfig+0xd0>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d00b      	beq.n	800304a <TIM_Base_SetConfig+0x62>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003038:	d007      	beq.n	800304a <TIM_Base_SetConfig+0x62>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a1f      	ldr	r2, [pc, #124]	@ (80030bc <TIM_Base_SetConfig+0xd4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d003      	beq.n	800304a <TIM_Base_SetConfig+0x62>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a1e      	ldr	r2, [pc, #120]	@ (80030c0 <TIM_Base_SetConfig+0xd8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d108      	bne.n	800305c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	4313      	orrs	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a0d      	ldr	r2, [pc, #52]	@ (80030b8 <TIM_Base_SetConfig+0xd0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d103      	bne.n	8003090 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	691a      	ldr	r2, [r3, #16]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d005      	beq.n	80030ae <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f023 0201 	bic.w	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	611a      	str	r2, [r3, #16]
  }
}
 80030ae:	bf00      	nop
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr
 80030b8:	40012c00 	.word	0x40012c00
 80030bc:	40000400 	.word	0x40000400
 80030c0:	40000800 	.word	0x40000800

080030c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	f023 0201 	bic.w	r2, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0303 	bic.w	r3, r3, #3
 80030fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f023 0302 	bic.w	r3, r3, #2
 800310c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4313      	orrs	r3, r2
 8003116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a1c      	ldr	r2, [pc, #112]	@ (800318c <TIM_OC1_SetConfig+0xc8>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d10c      	bne.n	800313a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f023 0308 	bic.w	r3, r3, #8
 8003126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	4313      	orrs	r3, r2
 8003130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f023 0304 	bic.w	r3, r3, #4
 8003138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a13      	ldr	r2, [pc, #76]	@ (800318c <TIM_OC1_SetConfig+0xc8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d111      	bne.n	8003166 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4313      	orrs	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	621a      	str	r2, [r3, #32]
}
 8003180:	bf00      	nop
 8003182:	371c      	adds	r7, #28
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40012c00 	.word	0x40012c00

08003190 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003190:	b480      	push	{r7}
 8003192:	b087      	sub	sp, #28
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	f023 0210 	bic.w	r2, r3, #16
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	021b      	lsls	r3, r3, #8
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f023 0320 	bic.w	r3, r3, #32
 80031da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003260 <TIM_OC2_SetConfig+0xd0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d10d      	bne.n	800320c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4313      	orrs	r3, r2
 8003202:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800320a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a14      	ldr	r2, [pc, #80]	@ (8003260 <TIM_OC2_SetConfig+0xd0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d113      	bne.n	800323c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800321a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003222:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	4313      	orrs	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	621a      	str	r2, [r3, #32]
}
 8003256:	bf00      	nop
 8003258:	371c      	adds	r7, #28
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr
 8003260:	40012c00 	.word	0x40012c00

08003264 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0303 	bic.w	r3, r3, #3
 800329a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003334 <TIM_OC3_SetConfig+0xd0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d10d      	bne.n	80032de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80032c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	021b      	lsls	r3, r3, #8
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80032dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a14      	ldr	r2, [pc, #80]	@ (8003334 <TIM_OC3_SetConfig+0xd0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d113      	bne.n	800330e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80032f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4313      	orrs	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	621a      	str	r2, [r3, #32]
}
 8003328:	bf00      	nop
 800332a:	371c      	adds	r7, #28
 800332c:	46bd      	mov	sp, r7
 800332e:	bc80      	pop	{r7}
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40012c00 	.word	0x40012c00

08003338 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800336e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	021b      	lsls	r3, r3, #8
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4313      	orrs	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003382:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	031b      	lsls	r3, r3, #12
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a0f      	ldr	r2, [pc, #60]	@ (80033d0 <TIM_OC4_SetConfig+0x98>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d109      	bne.n	80033ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800339e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	019b      	lsls	r3, r3, #6
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	621a      	str	r2, [r3, #32]
}
 80033c6:	bf00      	nop
 80033c8:	371c      	adds	r7, #28
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr
 80033d0:	40012c00 	.word	0x40012c00

080033d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	f023 0201 	bic.w	r2, r3, #1
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f023 030a 	bic.w	r3, r3, #10
 8003410:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	4313      	orrs	r3, r2
 8003418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	621a      	str	r2, [r3, #32]
}
 8003426:	bf00      	nop
 8003428:	371c      	adds	r7, #28
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr

08003430 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	f023 0210 	bic.w	r2, r3, #16
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800345a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	031b      	lsls	r3, r3, #12
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	4313      	orrs	r3, r2
 8003464:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800346c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	621a      	str	r2, [r3, #32]
}
 8003484:	bf00      	nop
 8003486:	371c      	adds	r7, #28
 8003488:	46bd      	mov	sp, r7
 800348a:	bc80      	pop	{r7}
 800348c:	4770      	bx	lr

0800348e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800348e:	b480      	push	{r7}
 8003490:	b085      	sub	sp, #20
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f043 0307 	orr.w	r3, r3, #7
 80034b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	609a      	str	r2, [r3, #8]
}
 80034b8:	bf00      	nop
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	bc80      	pop	{r7}
 80034c0:	4770      	bx	lr

080034c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b087      	sub	sp, #28
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
 80034ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	021a      	lsls	r2, r3, #8
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	431a      	orrs	r2, r3
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	609a      	str	r2, [r3, #8]
}
 80034f6:	bf00      	nop
 80034f8:	371c      	adds	r7, #28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr

08003500 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f003 031f 	and.w	r3, r3, #31
 8003512:	2201      	movs	r2, #1
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a1a      	ldr	r2, [r3, #32]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	43db      	mvns	r3, r3
 8003522:	401a      	ands	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a1a      	ldr	r2, [r3, #32]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	fa01 f303 	lsl.w	r3, r1, r3
 8003538:	431a      	orrs	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	621a      	str	r2, [r3, #32]
}
 800353e:	bf00      	nop
 8003540:	371c      	adds	r7, #28
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr

08003548 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d109      	bne.n	800356c <HAL_TIMEx_PWMN_Start+0x24>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b01      	cmp	r3, #1
 8003562:	bf14      	ite	ne
 8003564:	2301      	movne	r3, #1
 8003566:	2300      	moveq	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	e022      	b.n	80035b2 <HAL_TIMEx_PWMN_Start+0x6a>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2b04      	cmp	r3, #4
 8003570:	d109      	bne.n	8003586 <HAL_TIMEx_PWMN_Start+0x3e>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b01      	cmp	r3, #1
 800357c:	bf14      	ite	ne
 800357e:	2301      	movne	r3, #1
 8003580:	2300      	moveq	r3, #0
 8003582:	b2db      	uxtb	r3, r3
 8003584:	e015      	b.n	80035b2 <HAL_TIMEx_PWMN_Start+0x6a>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b08      	cmp	r3, #8
 800358a:	d109      	bne.n	80035a0 <HAL_TIMEx_PWMN_Start+0x58>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b01      	cmp	r3, #1
 8003596:	bf14      	ite	ne
 8003598:	2301      	movne	r3, #1
 800359a:	2300      	moveq	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	e008      	b.n	80035b2 <HAL_TIMEx_PWMN_Start+0x6a>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	bf14      	ite	ne
 80035ac:	2301      	movne	r3, #1
 80035ae:	2300      	moveq	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e059      	b.n	800366e <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d104      	bne.n	80035ca <HAL_TIMEx_PWMN_Start+0x82>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035c8:	e013      	b.n	80035f2 <HAL_TIMEx_PWMN_Start+0xaa>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d104      	bne.n	80035da <HAL_TIMEx_PWMN_Start+0x92>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035d8:	e00b      	b.n	80035f2 <HAL_TIMEx_PWMN_Start+0xaa>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d104      	bne.n	80035ea <HAL_TIMEx_PWMN_Start+0xa2>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035e8:	e003      	b.n	80035f2 <HAL_TIMEx_PWMN_Start+0xaa>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2202      	movs	r2, #2
 80035ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2204      	movs	r2, #4
 80035f8:	6839      	ldr	r1, [r7, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 f94f 	bl	800389e <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800360e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a18      	ldr	r2, [pc, #96]	@ (8003678 <HAL_TIMEx_PWMN_Start+0x130>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d00e      	beq.n	8003638 <HAL_TIMEx_PWMN_Start+0xf0>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003622:	d009      	beq.n	8003638 <HAL_TIMEx_PWMN_Start+0xf0>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a14      	ldr	r2, [pc, #80]	@ (800367c <HAL_TIMEx_PWMN_Start+0x134>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d004      	beq.n	8003638 <HAL_TIMEx_PWMN_Start+0xf0>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a13      	ldr	r2, [pc, #76]	@ (8003680 <HAL_TIMEx_PWMN_Start+0x138>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d111      	bne.n	800365c <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b06      	cmp	r3, #6
 8003648:	d010      	beq.n	800366c <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0201 	orr.w	r2, r2, #1
 8003658:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800365a:	e007      	b.n	800366c <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40012c00 	.word	0x40012c00
 800367c:	40000400 	.word	0x40000400
 8003680:	40000800 	.word	0x40000800

08003684 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2200      	movs	r2, #0
 8003694:	6839      	ldr	r1, [r7, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f000 f901 	bl	800389e <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6a1a      	ldr	r2, [r3, #32]
 80036a2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10f      	bne.n	80036cc <HAL_TIMEx_PWMN_Stop+0x48>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6a1a      	ldr	r2, [r3, #32]
 80036b2:	f240 4344 	movw	r3, #1092	@ 0x444
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d107      	bne.n	80036cc <HAL_TIMEx_PWMN_Stop+0x48>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036ca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6a1a      	ldr	r2, [r3, #32]
 80036d2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10f      	bne.n	80036fc <HAL_TIMEx_PWMN_Stop+0x78>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6a1a      	ldr	r2, [r3, #32]
 80036e2:	f240 4344 	movw	r3, #1092	@ 0x444
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d107      	bne.n	80036fc <HAL_TIMEx_PWMN_Stop+0x78>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0201 	bic.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d104      	bne.n	800370c <HAL_TIMEx_PWMN_Stop+0x88>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800370a:	e013      	b.n	8003734 <HAL_TIMEx_PWMN_Stop+0xb0>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	2b04      	cmp	r3, #4
 8003710:	d104      	bne.n	800371c <HAL_TIMEx_PWMN_Stop+0x98>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800371a:	e00b      	b.n	8003734 <HAL_TIMEx_PWMN_Stop+0xb0>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	2b08      	cmp	r3, #8
 8003720:	d104      	bne.n	800372c <HAL_TIMEx_PWMN_Stop+0xa8>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800372a:	e003      	b.n	8003734 <HAL_TIMEx_PWMN_Stop+0xb0>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003754:	2302      	movs	r3, #2
 8003756:	e046      	b.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800377e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a16      	ldr	r2, [pc, #88]	@ (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d00e      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037a4:	d009      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a12      	ldr	r2, [pc, #72]	@ (80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d004      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a10      	ldr	r2, [pc, #64]	@ (80037f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d10c      	bne.n	80037d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr
 80037f0:	40012c00 	.word	0x40012c00
 80037f4:	40000400 	.word	0x40000400
 80037f8:	40000800 	.word	0x40000800

080037fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003814:	2302      	movs	r3, #2
 8003816:	e03d      	b.n	8003894 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	4313      	orrs	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	4313      	orrs	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4313      	orrs	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr

0800389e <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800389e:	b480      	push	{r7}
 80038a0:	b087      	sub	sp, #28
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	2204      	movs	r2, #4
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a1a      	ldr	r2, [r3, #32]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	43db      	mvns	r3, r3
 80038c0:	401a      	ands	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6a1a      	ldr	r2, [r3, #32]
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f003 030f 	and.w	r3, r3, #15
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	fa01 f303 	lsl.w	r3, r1, r3
 80038d6:	431a      	orrs	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	621a      	str	r2, [r3, #32]
}
 80038dc:	bf00      	nop
 80038de:	371c      	adds	r7, #28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	4770      	bx	lr

080038e6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b082      	sub	sp, #8
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e042      	b.n	800397e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d106      	bne.n	8003912 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7fd f8b9 	bl	8000a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2224      	movs	r2, #36	@ 0x24
 8003916:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003928:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fdb8 	bl	80044a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691a      	ldr	r2, [r3, #16]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800393e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695a      	ldr	r2, [r3, #20]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800394e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800395e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b08a      	sub	sp, #40	@ 0x28
 800398a:	af02      	add	r7, sp, #8
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	603b      	str	r3, [r7, #0]
 8003992:	4613      	mov	r3, r2
 8003994:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b20      	cmp	r3, #32
 80039a4:	d175      	bne.n	8003a92 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <HAL_UART_Transmit+0x2c>
 80039ac:	88fb      	ldrh	r3, [r7, #6]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e06e      	b.n	8003a94 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2221      	movs	r2, #33	@ 0x21
 80039c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039c4:	f7fd f9e8 	bl	8000d98 <HAL_GetTick>
 80039c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	88fa      	ldrh	r2, [r7, #6]
 80039ce:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	88fa      	ldrh	r2, [r7, #6]
 80039d4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039de:	d108      	bne.n	80039f2 <HAL_UART_Transmit+0x6c>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d104      	bne.n	80039f2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	61bb      	str	r3, [r7, #24]
 80039f0:	e003      	b.n	80039fa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039fa:	e02e      	b.n	8003a5a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2200      	movs	r2, #0
 8003a04:	2180      	movs	r1, #128	@ 0x80
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 fb1d 	bl	8004046 <UART_WaitOnFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2220      	movs	r2, #32
 8003a16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e03a      	b.n	8003a94 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10b      	bne.n	8003a3c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	881b      	ldrh	r3, [r3, #0]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a32:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	3302      	adds	r3, #2
 8003a38:	61bb      	str	r3, [r7, #24]
 8003a3a:	e007      	b.n	8003a4c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	781a      	ldrb	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1cb      	bne.n	80039fc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2140      	movs	r1, #64	@ 0x40
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 fae9 	bl	8004046 <UART_WaitOnFlagUntilTimeout>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d005      	beq.n	8003a86 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e006      	b.n	8003a94 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	e000      	b.n	8003a94 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a92:	2302      	movs	r3, #2
  }
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3720      	adds	r7, #32
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b20      	cmp	r3, #32
 8003ab4:	d112      	bne.n	8003adc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d002      	beq.n	8003ac2 <HAL_UART_Receive_IT+0x26>
 8003abc:	88fb      	ldrh	r3, [r7, #6]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e00b      	b.n	8003ade <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003acc:	88fb      	ldrh	r3, [r7, #6]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	68b9      	ldr	r1, [r7, #8]
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fb10 	bl	80040f8 <UART_Start_Receive_IT>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	e000      	b.n	8003ade <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003adc:	2302      	movs	r3, #2
  }
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b0ba      	sub	sp, #232	@ 0xe8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003b26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10f      	bne.n	8003b4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <HAL_UART_IRQHandler+0x66>
 8003b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fbec 	bl	8004324 <UART_Receive_IT>
      return;
 8003b4c:	e25b      	b.n	8004006 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 80de 	beq.w	8003d14 <HAL_UART_IRQHandler+0x22c>
 8003b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d106      	bne.n	8003b72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b68:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80d1 	beq.w	8003d14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00b      	beq.n	8003b96 <HAL_UART_IRQHandler+0xae>
 8003b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8e:	f043 0201 	orr.w	r2, r3, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00b      	beq.n	8003bba <HAL_UART_IRQHandler+0xd2>
 8003ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb2:	f043 0202 	orr.w	r2, r3, #2
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00b      	beq.n	8003bde <HAL_UART_IRQHandler+0xf6>
 8003bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd6:	f043 0204 	orr.w	r2, r3, #4
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d011      	beq.n	8003c0e <HAL_UART_IRQHandler+0x126>
 8003bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d105      	bne.n	8003c02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d005      	beq.n	8003c0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c06:	f043 0208 	orr.w	r2, r3, #8
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 81f2 	beq.w	8003ffc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_UART_IRQHandler+0x14e>
 8003c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c28:	f003 0320 	and.w	r3, r3, #32
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fb77 	bl	8004324 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	bf14      	ite	ne
 8003c44:	2301      	movne	r3, #1
 8003c46:	2300      	moveq	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d103      	bne.n	8003c62 <HAL_UART_IRQHandler+0x17a>
 8003c5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d04f      	beq.n	8003d02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fa81 	bl	800416a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d041      	beq.n	8003cfa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3314      	adds	r3, #20
 8003c7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3314      	adds	r3, #20
 8003c9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ca2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003caa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003cae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003cb2:	e841 2300 	strex	r3, r2, [r1]
 8003cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003cba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1d9      	bne.n	8003c76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d013      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cce:	4a7e      	ldr	r2, [pc, #504]	@ (8003ec8 <HAL_UART_IRQHandler+0x3e0>)
 8003cd0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fd fe2c 	bl	8001934 <HAL_DMA_Abort_IT>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d016      	beq.n	8003d10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003cec:	4610      	mov	r0, r2
 8003cee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf0:	e00e      	b.n	8003d10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f993 	bl	800401e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf8:	e00a      	b.n	8003d10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f98f 	bl	800401e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d00:	e006      	b.n	8003d10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f98b 	bl	800401e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003d0e:	e175      	b.n	8003ffc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d10:	bf00      	nop
    return;
 8003d12:	e173      	b.n	8003ffc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	f040 814f 	bne.w	8003fbc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d22:	f003 0310 	and.w	r3, r3, #16
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8148 	beq.w	8003fbc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d30:	f003 0310 	and.w	r3, r3, #16
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 8141 	beq.w	8003fbc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	60bb      	str	r3, [r7, #8]
 8003d4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 80b6 	beq.w	8003ecc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 8145 	beq.w	8004000 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	f080 813e 	bcs.w	8004000 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d8a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	2b20      	cmp	r3, #32
 8003d94:	f000 8088 	beq.w	8003ea8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	330c      	adds	r3, #12
 8003d9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003da6:	e853 3f00 	ldrex	r3, [r3]
 8003daa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003dae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003db2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003db6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	330c      	adds	r3, #12
 8003dc0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003dc4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003dc8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dcc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003dd0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003dd4:	e841 2300 	strex	r3, r2, [r1]
 8003dd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ddc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1d9      	bne.n	8003d98 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3314      	adds	r3, #20
 8003dea:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dee:	e853 3f00 	ldrex	r3, [r3]
 8003df2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003df4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003df6:	f023 0301 	bic.w	r3, r3, #1
 8003dfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3314      	adds	r3, #20
 8003e04:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e08:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e10:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e14:	e841 2300 	strex	r3, r2, [r1]
 8003e18:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e1      	bne.n	8003de4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3314      	adds	r3, #20
 8003e26:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e2a:	e853 3f00 	ldrex	r3, [r3]
 8003e2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3314      	adds	r3, #20
 8003e40:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e44:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e46:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e48:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e4a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e4c:	e841 2300 	strex	r3, r2, [r1]
 8003e50:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1e3      	bne.n	8003e20 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	330c      	adds	r3, #12
 8003e6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e70:	e853 3f00 	ldrex	r3, [r3]
 8003e74:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e78:	f023 0310 	bic.w	r3, r3, #16
 8003e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	330c      	adds	r3, #12
 8003e86:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003e8a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e8c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e92:	e841 2300 	strex	r3, r2, [r1]
 8003e96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1e3      	bne.n	8003e66 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fd fd0b 	bl	80018be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f8b6 	bl	8004030 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ec4:	e09c      	b.n	8004000 <HAL_UART_IRQHandler+0x518>
 8003ec6:	bf00      	nop
 8003ec8:	0800422f 	.word	0x0800422f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 808e 	beq.w	8004004 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ee8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 8089 	beq.w	8004004 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	330c      	adds	r3, #12
 8003ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	330c      	adds	r3, #12
 8003f12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003f16:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e3      	bne.n	8003ef2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3314      	adds	r3, #20
 8003f30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	623b      	str	r3, [r7, #32]
   return(result);
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	f023 0301 	bic.w	r3, r3, #1
 8003f40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3314      	adds	r3, #20
 8003f4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f4e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f56:	e841 2300 	strex	r3, r2, [r1]
 8003f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1e3      	bne.n	8003f2a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	330c      	adds	r3, #12
 8003f76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	e853 3f00 	ldrex	r3, [r3]
 8003f7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0310 	bic.w	r3, r3, #16
 8003f86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	330c      	adds	r3, #12
 8003f90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003f94:	61fa      	str	r2, [r7, #28]
 8003f96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f98:	69b9      	ldr	r1, [r7, #24]
 8003f9a:	69fa      	ldr	r2, [r7, #28]
 8003f9c:	e841 2300 	strex	r3, r2, [r1]
 8003fa0:	617b      	str	r3, [r7, #20]
   return(result);
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1e3      	bne.n	8003f70 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f83b 	bl	8004030 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fba:	e023      	b.n	8004004 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d009      	beq.n	8003fdc <HAL_UART_IRQHandler+0x4f4>
 8003fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f93e 	bl	8004256 <UART_Transmit_IT>
    return;
 8003fda:	e014      	b.n	8004006 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00e      	beq.n	8004006 <HAL_UART_IRQHandler+0x51e>
 8003fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d008      	beq.n	8004006 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f97d 	bl	80042f4 <UART_EndTransmit_IT>
    return;
 8003ffa:	e004      	b.n	8004006 <HAL_UART_IRQHandler+0x51e>
    return;
 8003ffc:	bf00      	nop
 8003ffe:	e002      	b.n	8004006 <HAL_UART_IRQHandler+0x51e>
      return;
 8004000:	bf00      	nop
 8004002:	e000      	b.n	8004006 <HAL_UART_IRQHandler+0x51e>
      return;
 8004004:	bf00      	nop
  }
}
 8004006:	37e8      	adds	r7, #232	@ 0xe8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr

0800401e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr

08004030 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	bc80      	pop	{r7}
 8004044:	4770      	bx	lr

08004046 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b086      	sub	sp, #24
 800404a:	af00      	add	r7, sp, #0
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	603b      	str	r3, [r7, #0]
 8004052:	4613      	mov	r3, r2
 8004054:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004056:	e03b      	b.n	80040d0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405e:	d037      	beq.n	80040d0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004060:	f7fc fe9a 	bl	8000d98 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	6a3a      	ldr	r2, [r7, #32]
 800406c:	429a      	cmp	r2, r3
 800406e:	d302      	bcc.n	8004076 <UART_WaitOnFlagUntilTimeout+0x30>
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e03a      	b.n	80040f0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b00      	cmp	r3, #0
 8004086:	d023      	beq.n	80040d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b80      	cmp	r3, #128	@ 0x80
 800408c:	d020      	beq.n	80040d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b40      	cmp	r3, #64	@ 0x40
 8004092:	d01d      	beq.n	80040d0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d116      	bne.n	80040d0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80040a2:	2300      	movs	r3, #0
 80040a4:	617b      	str	r3, [r7, #20]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	617b      	str	r3, [r7, #20]
 80040b6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 f856 	bl	800416a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2208      	movs	r2, #8
 80040c2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e00f      	b.n	80040f0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	4013      	ands	r3, r2
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	429a      	cmp	r2, r3
 80040de:	bf0c      	ite	eq
 80040e0:	2301      	moveq	r3, #1
 80040e2:	2300      	movne	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	461a      	mov	r2, r3
 80040e8:	79fb      	ldrb	r3, [r7, #7]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d0b4      	beq.n	8004058 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	4613      	mov	r3, r2
 8004104:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	88fa      	ldrh	r2, [r7, #6]
 8004110:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	88fa      	ldrh	r2, [r7, #6]
 8004116:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2222      	movs	r2, #34	@ 0x22
 8004122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d007      	beq.n	800413e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800413c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695a      	ldr	r2, [r3, #20]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f042 0201 	orr.w	r2, r2, #1
 800414c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f042 0220 	orr.w	r2, r2, #32
 800415c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	bc80      	pop	{r7}
 8004168:	4770      	bx	lr

0800416a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800416a:	b480      	push	{r7}
 800416c:	b095      	sub	sp, #84	@ 0x54
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	330c      	adds	r3, #12
 8004178:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800417c:	e853 3f00 	ldrex	r3, [r3]
 8004180:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004184:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004188:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	330c      	adds	r3, #12
 8004190:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004192:	643a      	str	r2, [r7, #64]	@ 0x40
 8004194:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004196:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004198:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800419a:	e841 2300 	strex	r3, r2, [r1]
 800419e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1e5      	bne.n	8004172 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3314      	adds	r3, #20
 80041ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	e853 3f00 	ldrex	r3, [r3]
 80041b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	f023 0301 	bic.w	r3, r3, #1
 80041bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3314      	adds	r3, #20
 80041c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041ce:	e841 2300 	strex	r3, r2, [r1]
 80041d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1e5      	bne.n	80041a6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d119      	bne.n	8004216 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	330c      	adds	r3, #12
 80041e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	e853 3f00 	ldrex	r3, [r3]
 80041f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f023 0310 	bic.w	r3, r3, #16
 80041f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	330c      	adds	r3, #12
 8004200:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004202:	61ba      	str	r2, [r7, #24]
 8004204:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004206:	6979      	ldr	r1, [r7, #20]
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	e841 2300 	strex	r3, r2, [r1]
 800420e:	613b      	str	r3, [r7, #16]
   return(result);
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1e5      	bne.n	80041e2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004224:	bf00      	nop
 8004226:	3754      	adds	r7, #84	@ 0x54
 8004228:	46bd      	mov	sp, r7
 800422a:	bc80      	pop	{r7}
 800422c:	4770      	bx	lr

0800422e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b084      	sub	sp, #16
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f7ff fee8 	bl	800401e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800424e:	bf00      	nop
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004256:	b480      	push	{r7}
 8004258:	b085      	sub	sp, #20
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b21      	cmp	r3, #33	@ 0x21
 8004268:	d13e      	bne.n	80042e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004272:	d114      	bne.n	800429e <UART_Transmit_IT+0x48>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d110      	bne.n	800429e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004290:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	1c9a      	adds	r2, r3, #2
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	621a      	str	r2, [r3, #32]
 800429c:	e008      	b.n	80042b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	1c59      	adds	r1, r3, #1
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6211      	str	r1, [r2, #32]
 80042a8:	781a      	ldrb	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	4619      	mov	r1, r3
 80042be:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10f      	bne.n	80042e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	e000      	b.n	80042ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042e8:	2302      	movs	r3, #2
  }
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr

080042f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800430a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7ff fe79 	bl	800400c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08c      	sub	sp, #48	@ 0x30
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b22      	cmp	r3, #34	@ 0x22
 8004336:	f040 80ae 	bne.w	8004496 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004342:	d117      	bne.n	8004374 <UART_Receive_IT+0x50>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d113      	bne.n	8004374 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800434c:	2300      	movs	r3, #0
 800434e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004354:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	b29b      	uxth	r3, r3
 800435e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004362:	b29a      	uxth	r2, r3
 8004364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004366:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436c:	1c9a      	adds	r2, r3, #2
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	629a      	str	r2, [r3, #40]	@ 0x28
 8004372:	e026      	b.n	80043c2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004378:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800437a:	2300      	movs	r3, #0
 800437c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004386:	d007      	beq.n	8004398 <UART_Receive_IT+0x74>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10a      	bne.n	80043a6 <UART_Receive_IT+0x82>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d106      	bne.n	80043a6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a2:	701a      	strb	r2, [r3, #0]
 80043a4:	e008      	b.n	80043b8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	4619      	mov	r1, r3
 80043d0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d15d      	bne.n	8004492 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0220 	bic.w	r2, r2, #32
 80043e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695a      	ldr	r2, [r3, #20]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0201 	bic.w	r2, r2, #1
 8004404:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004418:	2b01      	cmp	r3, #1
 800441a:	d135      	bne.n	8004488 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	330c      	adds	r3, #12
 8004428:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	613b      	str	r3, [r7, #16]
   return(result);
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	f023 0310 	bic.w	r3, r3, #16
 8004438:	627b      	str	r3, [r7, #36]	@ 0x24
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	330c      	adds	r3, #12
 8004440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004442:	623a      	str	r2, [r7, #32]
 8004444:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	69f9      	ldr	r1, [r7, #28]
 8004448:	6a3a      	ldr	r2, [r7, #32]
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e5      	bne.n	8004422 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0310 	and.w	r3, r3, #16
 8004460:	2b10      	cmp	r3, #16
 8004462:	d10a      	bne.n	800447a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800447e:	4619      	mov	r1, r3
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7ff fdd5 	bl	8004030 <HAL_UARTEx_RxEventCallback>
 8004486:	e002      	b.n	800448e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7fb fe71 	bl	8000170 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	e002      	b.n	8004498 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	e000      	b.n	8004498 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004496:	2302      	movs	r3, #2
  }
}
 8004498:	4618      	mov	r0, r3
 800449a:	3730      	adds	r7, #48	@ 0x30
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80044da:	f023 030c 	bic.w	r3, r3, #12
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6812      	ldr	r2, [r2, #0]
 80044e2:	68b9      	ldr	r1, [r7, #8]
 80044e4:	430b      	orrs	r3, r1
 80044e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699a      	ldr	r2, [r3, #24]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a2c      	ldr	r2, [pc, #176]	@ (80045b4 <UART_SetConfig+0x114>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d103      	bne.n	8004510 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004508:	f7fe f828 	bl	800255c <HAL_RCC_GetPCLK2Freq>
 800450c:	60f8      	str	r0, [r7, #12]
 800450e:	e002      	b.n	8004516 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004510:	f7fe f810 	bl	8002534 <HAL_RCC_GetPCLK1Freq>
 8004514:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4613      	mov	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4413      	add	r3, r2
 800451e:	009a      	lsls	r2, r3, #2
 8004520:	441a      	add	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	fbb2 f3f3 	udiv	r3, r2, r3
 800452c:	4a22      	ldr	r2, [pc, #136]	@ (80045b8 <UART_SetConfig+0x118>)
 800452e:	fba2 2303 	umull	r2, r3, r2, r3
 8004532:	095b      	lsrs	r3, r3, #5
 8004534:	0119      	lsls	r1, r3, #4
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	4613      	mov	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	009a      	lsls	r2, r3, #2
 8004540:	441a      	add	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	fbb2 f2f3 	udiv	r2, r2, r3
 800454c:	4b1a      	ldr	r3, [pc, #104]	@ (80045b8 <UART_SetConfig+0x118>)
 800454e:	fba3 0302 	umull	r0, r3, r3, r2
 8004552:	095b      	lsrs	r3, r3, #5
 8004554:	2064      	movs	r0, #100	@ 0x64
 8004556:	fb00 f303 	mul.w	r3, r0, r3
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	3332      	adds	r3, #50	@ 0x32
 8004560:	4a15      	ldr	r2, [pc, #84]	@ (80045b8 <UART_SetConfig+0x118>)
 8004562:	fba2 2303 	umull	r2, r3, r2, r3
 8004566:	095b      	lsrs	r3, r3, #5
 8004568:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800456c:	4419      	add	r1, r3
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	4613      	mov	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	009a      	lsls	r2, r3, #2
 8004578:	441a      	add	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	fbb2 f2f3 	udiv	r2, r2, r3
 8004584:	4b0c      	ldr	r3, [pc, #48]	@ (80045b8 <UART_SetConfig+0x118>)
 8004586:	fba3 0302 	umull	r0, r3, r3, r2
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	2064      	movs	r0, #100	@ 0x64
 800458e:	fb00 f303 	mul.w	r3, r0, r3
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	3332      	adds	r3, #50	@ 0x32
 8004598:	4a07      	ldr	r2, [pc, #28]	@ (80045b8 <UART_SetConfig+0x118>)
 800459a:	fba2 2303 	umull	r2, r3, r2, r3
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	f003 020f 	and.w	r2, r3, #15
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	440a      	add	r2, r1
 80045aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80045ac:	bf00      	nop
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40013800 	.word	0x40013800
 80045b8:	51eb851f 	.word	0x51eb851f

080045bc <atoi>:
 80045bc:	220a      	movs	r2, #10
 80045be:	2100      	movs	r1, #0
 80045c0:	f000 b87a 	b.w	80046b8 <strtol>

080045c4 <_strtol_l.constprop.0>:
 80045c4:	2b24      	cmp	r3, #36	@ 0x24
 80045c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045ca:	4686      	mov	lr, r0
 80045cc:	4690      	mov	r8, r2
 80045ce:	d801      	bhi.n	80045d4 <_strtol_l.constprop.0+0x10>
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d106      	bne.n	80045e2 <_strtol_l.constprop.0+0x1e>
 80045d4:	f000 f8a2 	bl	800471c <__errno>
 80045d8:	2316      	movs	r3, #22
 80045da:	6003      	str	r3, [r0, #0]
 80045dc:	2000      	movs	r0, #0
 80045de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e2:	460d      	mov	r5, r1
 80045e4:	4833      	ldr	r0, [pc, #204]	@ (80046b4 <_strtol_l.constprop.0+0xf0>)
 80045e6:	462a      	mov	r2, r5
 80045e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80045ec:	5d06      	ldrb	r6, [r0, r4]
 80045ee:	f016 0608 	ands.w	r6, r6, #8
 80045f2:	d1f8      	bne.n	80045e6 <_strtol_l.constprop.0+0x22>
 80045f4:	2c2d      	cmp	r4, #45	@ 0x2d
 80045f6:	d12d      	bne.n	8004654 <_strtol_l.constprop.0+0x90>
 80045f8:	2601      	movs	r6, #1
 80045fa:	782c      	ldrb	r4, [r5, #0]
 80045fc:	1c95      	adds	r5, r2, #2
 80045fe:	f033 0210 	bics.w	r2, r3, #16
 8004602:	d109      	bne.n	8004618 <_strtol_l.constprop.0+0x54>
 8004604:	2c30      	cmp	r4, #48	@ 0x30
 8004606:	d12a      	bne.n	800465e <_strtol_l.constprop.0+0x9a>
 8004608:	782a      	ldrb	r2, [r5, #0]
 800460a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800460e:	2a58      	cmp	r2, #88	@ 0x58
 8004610:	d125      	bne.n	800465e <_strtol_l.constprop.0+0x9a>
 8004612:	2310      	movs	r3, #16
 8004614:	786c      	ldrb	r4, [r5, #1]
 8004616:	3502      	adds	r5, #2
 8004618:	2200      	movs	r2, #0
 800461a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800461e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004622:	fbbc f9f3 	udiv	r9, ip, r3
 8004626:	4610      	mov	r0, r2
 8004628:	fb03 ca19 	mls	sl, r3, r9, ip
 800462c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004630:	2f09      	cmp	r7, #9
 8004632:	d81b      	bhi.n	800466c <_strtol_l.constprop.0+0xa8>
 8004634:	463c      	mov	r4, r7
 8004636:	42a3      	cmp	r3, r4
 8004638:	dd27      	ble.n	800468a <_strtol_l.constprop.0+0xc6>
 800463a:	1c57      	adds	r7, r2, #1
 800463c:	d007      	beq.n	800464e <_strtol_l.constprop.0+0x8a>
 800463e:	4581      	cmp	r9, r0
 8004640:	d320      	bcc.n	8004684 <_strtol_l.constprop.0+0xc0>
 8004642:	d101      	bne.n	8004648 <_strtol_l.constprop.0+0x84>
 8004644:	45a2      	cmp	sl, r4
 8004646:	db1d      	blt.n	8004684 <_strtol_l.constprop.0+0xc0>
 8004648:	2201      	movs	r2, #1
 800464a:	fb00 4003 	mla	r0, r0, r3, r4
 800464e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004652:	e7eb      	b.n	800462c <_strtol_l.constprop.0+0x68>
 8004654:	2c2b      	cmp	r4, #43	@ 0x2b
 8004656:	bf04      	itt	eq
 8004658:	782c      	ldrbeq	r4, [r5, #0]
 800465a:	1c95      	addeq	r5, r2, #2
 800465c:	e7cf      	b.n	80045fe <_strtol_l.constprop.0+0x3a>
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1da      	bne.n	8004618 <_strtol_l.constprop.0+0x54>
 8004662:	2c30      	cmp	r4, #48	@ 0x30
 8004664:	bf0c      	ite	eq
 8004666:	2308      	moveq	r3, #8
 8004668:	230a      	movne	r3, #10
 800466a:	e7d5      	b.n	8004618 <_strtol_l.constprop.0+0x54>
 800466c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004670:	2f19      	cmp	r7, #25
 8004672:	d801      	bhi.n	8004678 <_strtol_l.constprop.0+0xb4>
 8004674:	3c37      	subs	r4, #55	@ 0x37
 8004676:	e7de      	b.n	8004636 <_strtol_l.constprop.0+0x72>
 8004678:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800467c:	2f19      	cmp	r7, #25
 800467e:	d804      	bhi.n	800468a <_strtol_l.constprop.0+0xc6>
 8004680:	3c57      	subs	r4, #87	@ 0x57
 8004682:	e7d8      	b.n	8004636 <_strtol_l.constprop.0+0x72>
 8004684:	f04f 32ff 	mov.w	r2, #4294967295
 8004688:	e7e1      	b.n	800464e <_strtol_l.constprop.0+0x8a>
 800468a:	1c53      	adds	r3, r2, #1
 800468c:	d108      	bne.n	80046a0 <_strtol_l.constprop.0+0xdc>
 800468e:	2322      	movs	r3, #34	@ 0x22
 8004690:	4660      	mov	r0, ip
 8004692:	f8ce 3000 	str.w	r3, [lr]
 8004696:	f1b8 0f00 	cmp.w	r8, #0
 800469a:	d0a0      	beq.n	80045de <_strtol_l.constprop.0+0x1a>
 800469c:	1e69      	subs	r1, r5, #1
 800469e:	e006      	b.n	80046ae <_strtol_l.constprop.0+0xea>
 80046a0:	b106      	cbz	r6, 80046a4 <_strtol_l.constprop.0+0xe0>
 80046a2:	4240      	negs	r0, r0
 80046a4:	f1b8 0f00 	cmp.w	r8, #0
 80046a8:	d099      	beq.n	80045de <_strtol_l.constprop.0+0x1a>
 80046aa:	2a00      	cmp	r2, #0
 80046ac:	d1f6      	bne.n	800469c <_strtol_l.constprop.0+0xd8>
 80046ae:	f8c8 1000 	str.w	r1, [r8]
 80046b2:	e794      	b.n	80045de <_strtol_l.constprop.0+0x1a>
 80046b4:	08005217 	.word	0x08005217

080046b8 <strtol>:
 80046b8:	4613      	mov	r3, r2
 80046ba:	460a      	mov	r2, r1
 80046bc:	4601      	mov	r1, r0
 80046be:	4802      	ldr	r0, [pc, #8]	@ (80046c8 <strtol+0x10>)
 80046c0:	6800      	ldr	r0, [r0, #0]
 80046c2:	f7ff bf7f 	b.w	80045c4 <_strtol_l.constprop.0>
 80046c6:	bf00      	nop
 80046c8:	20000014 	.word	0x20000014

080046cc <siprintf>:
 80046cc:	b40e      	push	{r1, r2, r3}
 80046ce:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80046d2:	b500      	push	{lr}
 80046d4:	b09c      	sub	sp, #112	@ 0x70
 80046d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80046d8:	9002      	str	r0, [sp, #8]
 80046da:	9006      	str	r0, [sp, #24]
 80046dc:	9107      	str	r1, [sp, #28]
 80046de:	9104      	str	r1, [sp, #16]
 80046e0:	4808      	ldr	r0, [pc, #32]	@ (8004704 <siprintf+0x38>)
 80046e2:	4909      	ldr	r1, [pc, #36]	@ (8004708 <siprintf+0x3c>)
 80046e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80046e8:	9105      	str	r1, [sp, #20]
 80046ea:	6800      	ldr	r0, [r0, #0]
 80046ec:	a902      	add	r1, sp, #8
 80046ee:	9301      	str	r3, [sp, #4]
 80046f0:	f000 f9a0 	bl	8004a34 <_svfiprintf_r>
 80046f4:	2200      	movs	r2, #0
 80046f6:	9b02      	ldr	r3, [sp, #8]
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	b01c      	add	sp, #112	@ 0x70
 80046fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004700:	b003      	add	sp, #12
 8004702:	4770      	bx	lr
 8004704:	20000014 	.word	0x20000014
 8004708:	ffff0208 	.word	0xffff0208

0800470c <memset>:
 800470c:	4603      	mov	r3, r0
 800470e:	4402      	add	r2, r0
 8004710:	4293      	cmp	r3, r2
 8004712:	d100      	bne.n	8004716 <memset+0xa>
 8004714:	4770      	bx	lr
 8004716:	f803 1b01 	strb.w	r1, [r3], #1
 800471a:	e7f9      	b.n	8004710 <memset+0x4>

0800471c <__errno>:
 800471c:	4b01      	ldr	r3, [pc, #4]	@ (8004724 <__errno+0x8>)
 800471e:	6818      	ldr	r0, [r3, #0]
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	20000014 	.word	0x20000014

08004728 <__libc_init_array>:
 8004728:	b570      	push	{r4, r5, r6, lr}
 800472a:	2600      	movs	r6, #0
 800472c:	4d0c      	ldr	r5, [pc, #48]	@ (8004760 <__libc_init_array+0x38>)
 800472e:	4c0d      	ldr	r4, [pc, #52]	@ (8004764 <__libc_init_array+0x3c>)
 8004730:	1b64      	subs	r4, r4, r5
 8004732:	10a4      	asrs	r4, r4, #2
 8004734:	42a6      	cmp	r6, r4
 8004736:	d109      	bne.n	800474c <__libc_init_array+0x24>
 8004738:	f000 fc78 	bl	800502c <_init>
 800473c:	2600      	movs	r6, #0
 800473e:	4d0a      	ldr	r5, [pc, #40]	@ (8004768 <__libc_init_array+0x40>)
 8004740:	4c0a      	ldr	r4, [pc, #40]	@ (800476c <__libc_init_array+0x44>)
 8004742:	1b64      	subs	r4, r4, r5
 8004744:	10a4      	asrs	r4, r4, #2
 8004746:	42a6      	cmp	r6, r4
 8004748:	d105      	bne.n	8004756 <__libc_init_array+0x2e>
 800474a:	bd70      	pop	{r4, r5, r6, pc}
 800474c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004750:	4798      	blx	r3
 8004752:	3601      	adds	r6, #1
 8004754:	e7ee      	b.n	8004734 <__libc_init_array+0xc>
 8004756:	f855 3b04 	ldr.w	r3, [r5], #4
 800475a:	4798      	blx	r3
 800475c:	3601      	adds	r6, #1
 800475e:	e7f2      	b.n	8004746 <__libc_init_array+0x1e>
 8004760:	08005354 	.word	0x08005354
 8004764:	08005354 	.word	0x08005354
 8004768:	08005354 	.word	0x08005354
 800476c:	08005358 	.word	0x08005358

08004770 <__retarget_lock_acquire_recursive>:
 8004770:	4770      	bx	lr

08004772 <__retarget_lock_release_recursive>:
 8004772:	4770      	bx	lr

08004774 <memcpy>:
 8004774:	440a      	add	r2, r1
 8004776:	4291      	cmp	r1, r2
 8004778:	f100 33ff 	add.w	r3, r0, #4294967295
 800477c:	d100      	bne.n	8004780 <memcpy+0xc>
 800477e:	4770      	bx	lr
 8004780:	b510      	push	{r4, lr}
 8004782:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004786:	4291      	cmp	r1, r2
 8004788:	f803 4f01 	strb.w	r4, [r3, #1]!
 800478c:	d1f9      	bne.n	8004782 <memcpy+0xe>
 800478e:	bd10      	pop	{r4, pc}

08004790 <_free_r>:
 8004790:	b538      	push	{r3, r4, r5, lr}
 8004792:	4605      	mov	r5, r0
 8004794:	2900      	cmp	r1, #0
 8004796:	d040      	beq.n	800481a <_free_r+0x8a>
 8004798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800479c:	1f0c      	subs	r4, r1, #4
 800479e:	2b00      	cmp	r3, #0
 80047a0:	bfb8      	it	lt
 80047a2:	18e4      	addlt	r4, r4, r3
 80047a4:	f000 f8de 	bl	8004964 <__malloc_lock>
 80047a8:	4a1c      	ldr	r2, [pc, #112]	@ (800481c <_free_r+0x8c>)
 80047aa:	6813      	ldr	r3, [r2, #0]
 80047ac:	b933      	cbnz	r3, 80047bc <_free_r+0x2c>
 80047ae:	6063      	str	r3, [r4, #4]
 80047b0:	6014      	str	r4, [r2, #0]
 80047b2:	4628      	mov	r0, r5
 80047b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047b8:	f000 b8da 	b.w	8004970 <__malloc_unlock>
 80047bc:	42a3      	cmp	r3, r4
 80047be:	d908      	bls.n	80047d2 <_free_r+0x42>
 80047c0:	6820      	ldr	r0, [r4, #0]
 80047c2:	1821      	adds	r1, r4, r0
 80047c4:	428b      	cmp	r3, r1
 80047c6:	bf01      	itttt	eq
 80047c8:	6819      	ldreq	r1, [r3, #0]
 80047ca:	685b      	ldreq	r3, [r3, #4]
 80047cc:	1809      	addeq	r1, r1, r0
 80047ce:	6021      	streq	r1, [r4, #0]
 80047d0:	e7ed      	b.n	80047ae <_free_r+0x1e>
 80047d2:	461a      	mov	r2, r3
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	b10b      	cbz	r3, 80047dc <_free_r+0x4c>
 80047d8:	42a3      	cmp	r3, r4
 80047da:	d9fa      	bls.n	80047d2 <_free_r+0x42>
 80047dc:	6811      	ldr	r1, [r2, #0]
 80047de:	1850      	adds	r0, r2, r1
 80047e0:	42a0      	cmp	r0, r4
 80047e2:	d10b      	bne.n	80047fc <_free_r+0x6c>
 80047e4:	6820      	ldr	r0, [r4, #0]
 80047e6:	4401      	add	r1, r0
 80047e8:	1850      	adds	r0, r2, r1
 80047ea:	4283      	cmp	r3, r0
 80047ec:	6011      	str	r1, [r2, #0]
 80047ee:	d1e0      	bne.n	80047b2 <_free_r+0x22>
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	4408      	add	r0, r1
 80047f6:	6010      	str	r0, [r2, #0]
 80047f8:	6053      	str	r3, [r2, #4]
 80047fa:	e7da      	b.n	80047b2 <_free_r+0x22>
 80047fc:	d902      	bls.n	8004804 <_free_r+0x74>
 80047fe:	230c      	movs	r3, #12
 8004800:	602b      	str	r3, [r5, #0]
 8004802:	e7d6      	b.n	80047b2 <_free_r+0x22>
 8004804:	6820      	ldr	r0, [r4, #0]
 8004806:	1821      	adds	r1, r4, r0
 8004808:	428b      	cmp	r3, r1
 800480a:	bf01      	itttt	eq
 800480c:	6819      	ldreq	r1, [r3, #0]
 800480e:	685b      	ldreq	r3, [r3, #4]
 8004810:	1809      	addeq	r1, r1, r0
 8004812:	6021      	streq	r1, [r4, #0]
 8004814:	6063      	str	r3, [r4, #4]
 8004816:	6054      	str	r4, [r2, #4]
 8004818:	e7cb      	b.n	80047b2 <_free_r+0x22>
 800481a:	bd38      	pop	{r3, r4, r5, pc}
 800481c:	20000300 	.word	0x20000300

08004820 <sbrk_aligned>:
 8004820:	b570      	push	{r4, r5, r6, lr}
 8004822:	4e0f      	ldr	r6, [pc, #60]	@ (8004860 <sbrk_aligned+0x40>)
 8004824:	460c      	mov	r4, r1
 8004826:	6831      	ldr	r1, [r6, #0]
 8004828:	4605      	mov	r5, r0
 800482a:	b911      	cbnz	r1, 8004832 <sbrk_aligned+0x12>
 800482c:	f000 fbaa 	bl	8004f84 <_sbrk_r>
 8004830:	6030      	str	r0, [r6, #0]
 8004832:	4621      	mov	r1, r4
 8004834:	4628      	mov	r0, r5
 8004836:	f000 fba5 	bl	8004f84 <_sbrk_r>
 800483a:	1c43      	adds	r3, r0, #1
 800483c:	d103      	bne.n	8004846 <sbrk_aligned+0x26>
 800483e:	f04f 34ff 	mov.w	r4, #4294967295
 8004842:	4620      	mov	r0, r4
 8004844:	bd70      	pop	{r4, r5, r6, pc}
 8004846:	1cc4      	adds	r4, r0, #3
 8004848:	f024 0403 	bic.w	r4, r4, #3
 800484c:	42a0      	cmp	r0, r4
 800484e:	d0f8      	beq.n	8004842 <sbrk_aligned+0x22>
 8004850:	1a21      	subs	r1, r4, r0
 8004852:	4628      	mov	r0, r5
 8004854:	f000 fb96 	bl	8004f84 <_sbrk_r>
 8004858:	3001      	adds	r0, #1
 800485a:	d1f2      	bne.n	8004842 <sbrk_aligned+0x22>
 800485c:	e7ef      	b.n	800483e <sbrk_aligned+0x1e>
 800485e:	bf00      	nop
 8004860:	200002fc 	.word	0x200002fc

08004864 <_malloc_r>:
 8004864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004868:	1ccd      	adds	r5, r1, #3
 800486a:	f025 0503 	bic.w	r5, r5, #3
 800486e:	3508      	adds	r5, #8
 8004870:	2d0c      	cmp	r5, #12
 8004872:	bf38      	it	cc
 8004874:	250c      	movcc	r5, #12
 8004876:	2d00      	cmp	r5, #0
 8004878:	4606      	mov	r6, r0
 800487a:	db01      	blt.n	8004880 <_malloc_r+0x1c>
 800487c:	42a9      	cmp	r1, r5
 800487e:	d904      	bls.n	800488a <_malloc_r+0x26>
 8004880:	230c      	movs	r3, #12
 8004882:	6033      	str	r3, [r6, #0]
 8004884:	2000      	movs	r0, #0
 8004886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800488a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004960 <_malloc_r+0xfc>
 800488e:	f000 f869 	bl	8004964 <__malloc_lock>
 8004892:	f8d8 3000 	ldr.w	r3, [r8]
 8004896:	461c      	mov	r4, r3
 8004898:	bb44      	cbnz	r4, 80048ec <_malloc_r+0x88>
 800489a:	4629      	mov	r1, r5
 800489c:	4630      	mov	r0, r6
 800489e:	f7ff ffbf 	bl	8004820 <sbrk_aligned>
 80048a2:	1c43      	adds	r3, r0, #1
 80048a4:	4604      	mov	r4, r0
 80048a6:	d158      	bne.n	800495a <_malloc_r+0xf6>
 80048a8:	f8d8 4000 	ldr.w	r4, [r8]
 80048ac:	4627      	mov	r7, r4
 80048ae:	2f00      	cmp	r7, #0
 80048b0:	d143      	bne.n	800493a <_malloc_r+0xd6>
 80048b2:	2c00      	cmp	r4, #0
 80048b4:	d04b      	beq.n	800494e <_malloc_r+0xea>
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	4639      	mov	r1, r7
 80048ba:	4630      	mov	r0, r6
 80048bc:	eb04 0903 	add.w	r9, r4, r3
 80048c0:	f000 fb60 	bl	8004f84 <_sbrk_r>
 80048c4:	4581      	cmp	r9, r0
 80048c6:	d142      	bne.n	800494e <_malloc_r+0xea>
 80048c8:	6821      	ldr	r1, [r4, #0]
 80048ca:	4630      	mov	r0, r6
 80048cc:	1a6d      	subs	r5, r5, r1
 80048ce:	4629      	mov	r1, r5
 80048d0:	f7ff ffa6 	bl	8004820 <sbrk_aligned>
 80048d4:	3001      	adds	r0, #1
 80048d6:	d03a      	beq.n	800494e <_malloc_r+0xea>
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	442b      	add	r3, r5
 80048dc:	6023      	str	r3, [r4, #0]
 80048de:	f8d8 3000 	ldr.w	r3, [r8]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	bb62      	cbnz	r2, 8004940 <_malloc_r+0xdc>
 80048e6:	f8c8 7000 	str.w	r7, [r8]
 80048ea:	e00f      	b.n	800490c <_malloc_r+0xa8>
 80048ec:	6822      	ldr	r2, [r4, #0]
 80048ee:	1b52      	subs	r2, r2, r5
 80048f0:	d420      	bmi.n	8004934 <_malloc_r+0xd0>
 80048f2:	2a0b      	cmp	r2, #11
 80048f4:	d917      	bls.n	8004926 <_malloc_r+0xc2>
 80048f6:	1961      	adds	r1, r4, r5
 80048f8:	42a3      	cmp	r3, r4
 80048fa:	6025      	str	r5, [r4, #0]
 80048fc:	bf18      	it	ne
 80048fe:	6059      	strne	r1, [r3, #4]
 8004900:	6863      	ldr	r3, [r4, #4]
 8004902:	bf08      	it	eq
 8004904:	f8c8 1000 	streq.w	r1, [r8]
 8004908:	5162      	str	r2, [r4, r5]
 800490a:	604b      	str	r3, [r1, #4]
 800490c:	4630      	mov	r0, r6
 800490e:	f000 f82f 	bl	8004970 <__malloc_unlock>
 8004912:	f104 000b 	add.w	r0, r4, #11
 8004916:	1d23      	adds	r3, r4, #4
 8004918:	f020 0007 	bic.w	r0, r0, #7
 800491c:	1ac2      	subs	r2, r0, r3
 800491e:	bf1c      	itt	ne
 8004920:	1a1b      	subne	r3, r3, r0
 8004922:	50a3      	strne	r3, [r4, r2]
 8004924:	e7af      	b.n	8004886 <_malloc_r+0x22>
 8004926:	6862      	ldr	r2, [r4, #4]
 8004928:	42a3      	cmp	r3, r4
 800492a:	bf0c      	ite	eq
 800492c:	f8c8 2000 	streq.w	r2, [r8]
 8004930:	605a      	strne	r2, [r3, #4]
 8004932:	e7eb      	b.n	800490c <_malloc_r+0xa8>
 8004934:	4623      	mov	r3, r4
 8004936:	6864      	ldr	r4, [r4, #4]
 8004938:	e7ae      	b.n	8004898 <_malloc_r+0x34>
 800493a:	463c      	mov	r4, r7
 800493c:	687f      	ldr	r7, [r7, #4]
 800493e:	e7b6      	b.n	80048ae <_malloc_r+0x4a>
 8004940:	461a      	mov	r2, r3
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	42a3      	cmp	r3, r4
 8004946:	d1fb      	bne.n	8004940 <_malloc_r+0xdc>
 8004948:	2300      	movs	r3, #0
 800494a:	6053      	str	r3, [r2, #4]
 800494c:	e7de      	b.n	800490c <_malloc_r+0xa8>
 800494e:	230c      	movs	r3, #12
 8004950:	4630      	mov	r0, r6
 8004952:	6033      	str	r3, [r6, #0]
 8004954:	f000 f80c 	bl	8004970 <__malloc_unlock>
 8004958:	e794      	b.n	8004884 <_malloc_r+0x20>
 800495a:	6005      	str	r5, [r0, #0]
 800495c:	e7d6      	b.n	800490c <_malloc_r+0xa8>
 800495e:	bf00      	nop
 8004960:	20000300 	.word	0x20000300

08004964 <__malloc_lock>:
 8004964:	4801      	ldr	r0, [pc, #4]	@ (800496c <__malloc_lock+0x8>)
 8004966:	f7ff bf03 	b.w	8004770 <__retarget_lock_acquire_recursive>
 800496a:	bf00      	nop
 800496c:	200002f8 	.word	0x200002f8

08004970 <__malloc_unlock>:
 8004970:	4801      	ldr	r0, [pc, #4]	@ (8004978 <__malloc_unlock+0x8>)
 8004972:	f7ff befe 	b.w	8004772 <__retarget_lock_release_recursive>
 8004976:	bf00      	nop
 8004978:	200002f8 	.word	0x200002f8

0800497c <__ssputs_r>:
 800497c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004980:	461f      	mov	r7, r3
 8004982:	688e      	ldr	r6, [r1, #8]
 8004984:	4682      	mov	sl, r0
 8004986:	42be      	cmp	r6, r7
 8004988:	460c      	mov	r4, r1
 800498a:	4690      	mov	r8, r2
 800498c:	680b      	ldr	r3, [r1, #0]
 800498e:	d82d      	bhi.n	80049ec <__ssputs_r+0x70>
 8004990:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004994:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004998:	d026      	beq.n	80049e8 <__ssputs_r+0x6c>
 800499a:	6965      	ldr	r5, [r4, #20]
 800499c:	6909      	ldr	r1, [r1, #16]
 800499e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049a2:	eba3 0901 	sub.w	r9, r3, r1
 80049a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049aa:	1c7b      	adds	r3, r7, #1
 80049ac:	444b      	add	r3, r9
 80049ae:	106d      	asrs	r5, r5, #1
 80049b0:	429d      	cmp	r5, r3
 80049b2:	bf38      	it	cc
 80049b4:	461d      	movcc	r5, r3
 80049b6:	0553      	lsls	r3, r2, #21
 80049b8:	d527      	bpl.n	8004a0a <__ssputs_r+0x8e>
 80049ba:	4629      	mov	r1, r5
 80049bc:	f7ff ff52 	bl	8004864 <_malloc_r>
 80049c0:	4606      	mov	r6, r0
 80049c2:	b360      	cbz	r0, 8004a1e <__ssputs_r+0xa2>
 80049c4:	464a      	mov	r2, r9
 80049c6:	6921      	ldr	r1, [r4, #16]
 80049c8:	f7ff fed4 	bl	8004774 <memcpy>
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80049d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049d6:	81a3      	strh	r3, [r4, #12]
 80049d8:	6126      	str	r6, [r4, #16]
 80049da:	444e      	add	r6, r9
 80049dc:	6026      	str	r6, [r4, #0]
 80049de:	463e      	mov	r6, r7
 80049e0:	6165      	str	r5, [r4, #20]
 80049e2:	eba5 0509 	sub.w	r5, r5, r9
 80049e6:	60a5      	str	r5, [r4, #8]
 80049e8:	42be      	cmp	r6, r7
 80049ea:	d900      	bls.n	80049ee <__ssputs_r+0x72>
 80049ec:	463e      	mov	r6, r7
 80049ee:	4632      	mov	r2, r6
 80049f0:	4641      	mov	r1, r8
 80049f2:	6820      	ldr	r0, [r4, #0]
 80049f4:	f000 faac 	bl	8004f50 <memmove>
 80049f8:	2000      	movs	r0, #0
 80049fa:	68a3      	ldr	r3, [r4, #8]
 80049fc:	1b9b      	subs	r3, r3, r6
 80049fe:	60a3      	str	r3, [r4, #8]
 8004a00:	6823      	ldr	r3, [r4, #0]
 8004a02:	4433      	add	r3, r6
 8004a04:	6023      	str	r3, [r4, #0]
 8004a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a0a:	462a      	mov	r2, r5
 8004a0c:	f000 fad8 	bl	8004fc0 <_realloc_r>
 8004a10:	4606      	mov	r6, r0
 8004a12:	2800      	cmp	r0, #0
 8004a14:	d1e0      	bne.n	80049d8 <__ssputs_r+0x5c>
 8004a16:	4650      	mov	r0, sl
 8004a18:	6921      	ldr	r1, [r4, #16]
 8004a1a:	f7ff feb9 	bl	8004790 <_free_r>
 8004a1e:	230c      	movs	r3, #12
 8004a20:	f8ca 3000 	str.w	r3, [sl]
 8004a24:	89a3      	ldrh	r3, [r4, #12]
 8004a26:	f04f 30ff 	mov.w	r0, #4294967295
 8004a2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a2e:	81a3      	strh	r3, [r4, #12]
 8004a30:	e7e9      	b.n	8004a06 <__ssputs_r+0x8a>
	...

08004a34 <_svfiprintf_r>:
 8004a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a38:	4698      	mov	r8, r3
 8004a3a:	898b      	ldrh	r3, [r1, #12]
 8004a3c:	4607      	mov	r7, r0
 8004a3e:	061b      	lsls	r3, r3, #24
 8004a40:	460d      	mov	r5, r1
 8004a42:	4614      	mov	r4, r2
 8004a44:	b09d      	sub	sp, #116	@ 0x74
 8004a46:	d510      	bpl.n	8004a6a <_svfiprintf_r+0x36>
 8004a48:	690b      	ldr	r3, [r1, #16]
 8004a4a:	b973      	cbnz	r3, 8004a6a <_svfiprintf_r+0x36>
 8004a4c:	2140      	movs	r1, #64	@ 0x40
 8004a4e:	f7ff ff09 	bl	8004864 <_malloc_r>
 8004a52:	6028      	str	r0, [r5, #0]
 8004a54:	6128      	str	r0, [r5, #16]
 8004a56:	b930      	cbnz	r0, 8004a66 <_svfiprintf_r+0x32>
 8004a58:	230c      	movs	r3, #12
 8004a5a:	603b      	str	r3, [r7, #0]
 8004a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a60:	b01d      	add	sp, #116	@ 0x74
 8004a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a66:	2340      	movs	r3, #64	@ 0x40
 8004a68:	616b      	str	r3, [r5, #20]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a6e:	2320      	movs	r3, #32
 8004a70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a74:	2330      	movs	r3, #48	@ 0x30
 8004a76:	f04f 0901 	mov.w	r9, #1
 8004a7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a7e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004c18 <_svfiprintf_r+0x1e4>
 8004a82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a86:	4623      	mov	r3, r4
 8004a88:	469a      	mov	sl, r3
 8004a8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a8e:	b10a      	cbz	r2, 8004a94 <_svfiprintf_r+0x60>
 8004a90:	2a25      	cmp	r2, #37	@ 0x25
 8004a92:	d1f9      	bne.n	8004a88 <_svfiprintf_r+0x54>
 8004a94:	ebba 0b04 	subs.w	fp, sl, r4
 8004a98:	d00b      	beq.n	8004ab2 <_svfiprintf_r+0x7e>
 8004a9a:	465b      	mov	r3, fp
 8004a9c:	4622      	mov	r2, r4
 8004a9e:	4629      	mov	r1, r5
 8004aa0:	4638      	mov	r0, r7
 8004aa2:	f7ff ff6b 	bl	800497c <__ssputs_r>
 8004aa6:	3001      	adds	r0, #1
 8004aa8:	f000 80a7 	beq.w	8004bfa <_svfiprintf_r+0x1c6>
 8004aac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004aae:	445a      	add	r2, fp
 8004ab0:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 809f 	beq.w	8004bfa <_svfiprintf_r+0x1c6>
 8004abc:	2300      	movs	r3, #0
 8004abe:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ac6:	f10a 0a01 	add.w	sl, sl, #1
 8004aca:	9304      	str	r3, [sp, #16]
 8004acc:	9307      	str	r3, [sp, #28]
 8004ace:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ad2:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ad4:	4654      	mov	r4, sl
 8004ad6:	2205      	movs	r2, #5
 8004ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004adc:	484e      	ldr	r0, [pc, #312]	@ (8004c18 <_svfiprintf_r+0x1e4>)
 8004ade:	f000 fa61 	bl	8004fa4 <memchr>
 8004ae2:	9a04      	ldr	r2, [sp, #16]
 8004ae4:	b9d8      	cbnz	r0, 8004b1e <_svfiprintf_r+0xea>
 8004ae6:	06d0      	lsls	r0, r2, #27
 8004ae8:	bf44      	itt	mi
 8004aea:	2320      	movmi	r3, #32
 8004aec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004af0:	0711      	lsls	r1, r2, #28
 8004af2:	bf44      	itt	mi
 8004af4:	232b      	movmi	r3, #43	@ 0x2b
 8004af6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004afa:	f89a 3000 	ldrb.w	r3, [sl]
 8004afe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b00:	d015      	beq.n	8004b2e <_svfiprintf_r+0xfa>
 8004b02:	4654      	mov	r4, sl
 8004b04:	2000      	movs	r0, #0
 8004b06:	f04f 0c0a 	mov.w	ip, #10
 8004b0a:	9a07      	ldr	r2, [sp, #28]
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b12:	3b30      	subs	r3, #48	@ 0x30
 8004b14:	2b09      	cmp	r3, #9
 8004b16:	d94b      	bls.n	8004bb0 <_svfiprintf_r+0x17c>
 8004b18:	b1b0      	cbz	r0, 8004b48 <_svfiprintf_r+0x114>
 8004b1a:	9207      	str	r2, [sp, #28]
 8004b1c:	e014      	b.n	8004b48 <_svfiprintf_r+0x114>
 8004b1e:	eba0 0308 	sub.w	r3, r0, r8
 8004b22:	fa09 f303 	lsl.w	r3, r9, r3
 8004b26:	4313      	orrs	r3, r2
 8004b28:	46a2      	mov	sl, r4
 8004b2a:	9304      	str	r3, [sp, #16]
 8004b2c:	e7d2      	b.n	8004ad4 <_svfiprintf_r+0xa0>
 8004b2e:	9b03      	ldr	r3, [sp, #12]
 8004b30:	1d19      	adds	r1, r3, #4
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	9103      	str	r1, [sp, #12]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bfbb      	ittet	lt
 8004b3a:	425b      	neglt	r3, r3
 8004b3c:	f042 0202 	orrlt.w	r2, r2, #2
 8004b40:	9307      	strge	r3, [sp, #28]
 8004b42:	9307      	strlt	r3, [sp, #28]
 8004b44:	bfb8      	it	lt
 8004b46:	9204      	strlt	r2, [sp, #16]
 8004b48:	7823      	ldrb	r3, [r4, #0]
 8004b4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b4c:	d10a      	bne.n	8004b64 <_svfiprintf_r+0x130>
 8004b4e:	7863      	ldrb	r3, [r4, #1]
 8004b50:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b52:	d132      	bne.n	8004bba <_svfiprintf_r+0x186>
 8004b54:	9b03      	ldr	r3, [sp, #12]
 8004b56:	3402      	adds	r4, #2
 8004b58:	1d1a      	adds	r2, r3, #4
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	9203      	str	r2, [sp, #12]
 8004b5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b62:	9305      	str	r3, [sp, #20]
 8004b64:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004c1c <_svfiprintf_r+0x1e8>
 8004b68:	2203      	movs	r2, #3
 8004b6a:	4650      	mov	r0, sl
 8004b6c:	7821      	ldrb	r1, [r4, #0]
 8004b6e:	f000 fa19 	bl	8004fa4 <memchr>
 8004b72:	b138      	cbz	r0, 8004b84 <_svfiprintf_r+0x150>
 8004b74:	2240      	movs	r2, #64	@ 0x40
 8004b76:	9b04      	ldr	r3, [sp, #16]
 8004b78:	eba0 000a 	sub.w	r0, r0, sl
 8004b7c:	4082      	lsls	r2, r0
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	3401      	adds	r4, #1
 8004b82:	9304      	str	r3, [sp, #16]
 8004b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b88:	2206      	movs	r2, #6
 8004b8a:	4825      	ldr	r0, [pc, #148]	@ (8004c20 <_svfiprintf_r+0x1ec>)
 8004b8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b90:	f000 fa08 	bl	8004fa4 <memchr>
 8004b94:	2800      	cmp	r0, #0
 8004b96:	d036      	beq.n	8004c06 <_svfiprintf_r+0x1d2>
 8004b98:	4b22      	ldr	r3, [pc, #136]	@ (8004c24 <_svfiprintf_r+0x1f0>)
 8004b9a:	bb1b      	cbnz	r3, 8004be4 <_svfiprintf_r+0x1b0>
 8004b9c:	9b03      	ldr	r3, [sp, #12]
 8004b9e:	3307      	adds	r3, #7
 8004ba0:	f023 0307 	bic.w	r3, r3, #7
 8004ba4:	3308      	adds	r3, #8
 8004ba6:	9303      	str	r3, [sp, #12]
 8004ba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004baa:	4433      	add	r3, r6
 8004bac:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bae:	e76a      	b.n	8004a86 <_svfiprintf_r+0x52>
 8004bb0:	460c      	mov	r4, r1
 8004bb2:	2001      	movs	r0, #1
 8004bb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bb8:	e7a8      	b.n	8004b0c <_svfiprintf_r+0xd8>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f04f 0c0a 	mov.w	ip, #10
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	3401      	adds	r4, #1
 8004bc4:	9305      	str	r3, [sp, #20]
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bcc:	3a30      	subs	r2, #48	@ 0x30
 8004bce:	2a09      	cmp	r2, #9
 8004bd0:	d903      	bls.n	8004bda <_svfiprintf_r+0x1a6>
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0c6      	beq.n	8004b64 <_svfiprintf_r+0x130>
 8004bd6:	9105      	str	r1, [sp, #20]
 8004bd8:	e7c4      	b.n	8004b64 <_svfiprintf_r+0x130>
 8004bda:	4604      	mov	r4, r0
 8004bdc:	2301      	movs	r3, #1
 8004bde:	fb0c 2101 	mla	r1, ip, r1, r2
 8004be2:	e7f0      	b.n	8004bc6 <_svfiprintf_r+0x192>
 8004be4:	ab03      	add	r3, sp, #12
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	462a      	mov	r2, r5
 8004bea:	4638      	mov	r0, r7
 8004bec:	4b0e      	ldr	r3, [pc, #56]	@ (8004c28 <_svfiprintf_r+0x1f4>)
 8004bee:	a904      	add	r1, sp, #16
 8004bf0:	f3af 8000 	nop.w
 8004bf4:	1c42      	adds	r2, r0, #1
 8004bf6:	4606      	mov	r6, r0
 8004bf8:	d1d6      	bne.n	8004ba8 <_svfiprintf_r+0x174>
 8004bfa:	89ab      	ldrh	r3, [r5, #12]
 8004bfc:	065b      	lsls	r3, r3, #25
 8004bfe:	f53f af2d 	bmi.w	8004a5c <_svfiprintf_r+0x28>
 8004c02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c04:	e72c      	b.n	8004a60 <_svfiprintf_r+0x2c>
 8004c06:	ab03      	add	r3, sp, #12
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	462a      	mov	r2, r5
 8004c0c:	4638      	mov	r0, r7
 8004c0e:	4b06      	ldr	r3, [pc, #24]	@ (8004c28 <_svfiprintf_r+0x1f4>)
 8004c10:	a904      	add	r1, sp, #16
 8004c12:	f000 f87d 	bl	8004d10 <_printf_i>
 8004c16:	e7ed      	b.n	8004bf4 <_svfiprintf_r+0x1c0>
 8004c18:	08005317 	.word	0x08005317
 8004c1c:	0800531d 	.word	0x0800531d
 8004c20:	08005321 	.word	0x08005321
 8004c24:	00000000 	.word	0x00000000
 8004c28:	0800497d 	.word	0x0800497d

08004c2c <_printf_common>:
 8004c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c30:	4616      	mov	r6, r2
 8004c32:	4698      	mov	r8, r3
 8004c34:	688a      	ldr	r2, [r1, #8]
 8004c36:	690b      	ldr	r3, [r1, #16]
 8004c38:	4607      	mov	r7, r0
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	bfb8      	it	lt
 8004c3e:	4613      	movlt	r3, r2
 8004c40:	6033      	str	r3, [r6, #0]
 8004c42:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c46:	460c      	mov	r4, r1
 8004c48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c4c:	b10a      	cbz	r2, 8004c52 <_printf_common+0x26>
 8004c4e:	3301      	adds	r3, #1
 8004c50:	6033      	str	r3, [r6, #0]
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	0699      	lsls	r1, r3, #26
 8004c56:	bf42      	ittt	mi
 8004c58:	6833      	ldrmi	r3, [r6, #0]
 8004c5a:	3302      	addmi	r3, #2
 8004c5c:	6033      	strmi	r3, [r6, #0]
 8004c5e:	6825      	ldr	r5, [r4, #0]
 8004c60:	f015 0506 	ands.w	r5, r5, #6
 8004c64:	d106      	bne.n	8004c74 <_printf_common+0x48>
 8004c66:	f104 0a19 	add.w	sl, r4, #25
 8004c6a:	68e3      	ldr	r3, [r4, #12]
 8004c6c:	6832      	ldr	r2, [r6, #0]
 8004c6e:	1a9b      	subs	r3, r3, r2
 8004c70:	42ab      	cmp	r3, r5
 8004c72:	dc2b      	bgt.n	8004ccc <_printf_common+0xa0>
 8004c74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c78:	6822      	ldr	r2, [r4, #0]
 8004c7a:	3b00      	subs	r3, #0
 8004c7c:	bf18      	it	ne
 8004c7e:	2301      	movne	r3, #1
 8004c80:	0692      	lsls	r2, r2, #26
 8004c82:	d430      	bmi.n	8004ce6 <_printf_common+0xba>
 8004c84:	4641      	mov	r1, r8
 8004c86:	4638      	mov	r0, r7
 8004c88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c8c:	47c8      	blx	r9
 8004c8e:	3001      	adds	r0, #1
 8004c90:	d023      	beq.n	8004cda <_printf_common+0xae>
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	6922      	ldr	r2, [r4, #16]
 8004c96:	f003 0306 	and.w	r3, r3, #6
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	bf14      	ite	ne
 8004c9e:	2500      	movne	r5, #0
 8004ca0:	6833      	ldreq	r3, [r6, #0]
 8004ca2:	f04f 0600 	mov.w	r6, #0
 8004ca6:	bf08      	it	eq
 8004ca8:	68e5      	ldreq	r5, [r4, #12]
 8004caa:	f104 041a 	add.w	r4, r4, #26
 8004cae:	bf08      	it	eq
 8004cb0:	1aed      	subeq	r5, r5, r3
 8004cb2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004cb6:	bf08      	it	eq
 8004cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	bfc4      	itt	gt
 8004cc0:	1a9b      	subgt	r3, r3, r2
 8004cc2:	18ed      	addgt	r5, r5, r3
 8004cc4:	42b5      	cmp	r5, r6
 8004cc6:	d11a      	bne.n	8004cfe <_printf_common+0xd2>
 8004cc8:	2000      	movs	r0, #0
 8004cca:	e008      	b.n	8004cde <_printf_common+0xb2>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	4652      	mov	r2, sl
 8004cd0:	4641      	mov	r1, r8
 8004cd2:	4638      	mov	r0, r7
 8004cd4:	47c8      	blx	r9
 8004cd6:	3001      	adds	r0, #1
 8004cd8:	d103      	bne.n	8004ce2 <_printf_common+0xb6>
 8004cda:	f04f 30ff 	mov.w	r0, #4294967295
 8004cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce2:	3501      	adds	r5, #1
 8004ce4:	e7c1      	b.n	8004c6a <_printf_common+0x3e>
 8004ce6:	2030      	movs	r0, #48	@ 0x30
 8004ce8:	18e1      	adds	r1, r4, r3
 8004cea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004cf4:	4422      	add	r2, r4
 8004cf6:	3302      	adds	r3, #2
 8004cf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004cfc:	e7c2      	b.n	8004c84 <_printf_common+0x58>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	4622      	mov	r2, r4
 8004d02:	4641      	mov	r1, r8
 8004d04:	4638      	mov	r0, r7
 8004d06:	47c8      	blx	r9
 8004d08:	3001      	adds	r0, #1
 8004d0a:	d0e6      	beq.n	8004cda <_printf_common+0xae>
 8004d0c:	3601      	adds	r6, #1
 8004d0e:	e7d9      	b.n	8004cc4 <_printf_common+0x98>

08004d10 <_printf_i>:
 8004d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d14:	7e0f      	ldrb	r7, [r1, #24]
 8004d16:	4691      	mov	r9, r2
 8004d18:	2f78      	cmp	r7, #120	@ 0x78
 8004d1a:	4680      	mov	r8, r0
 8004d1c:	460c      	mov	r4, r1
 8004d1e:	469a      	mov	sl, r3
 8004d20:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d26:	d807      	bhi.n	8004d38 <_printf_i+0x28>
 8004d28:	2f62      	cmp	r7, #98	@ 0x62
 8004d2a:	d80a      	bhi.n	8004d42 <_printf_i+0x32>
 8004d2c:	2f00      	cmp	r7, #0
 8004d2e:	f000 80d3 	beq.w	8004ed8 <_printf_i+0x1c8>
 8004d32:	2f58      	cmp	r7, #88	@ 0x58
 8004d34:	f000 80ba 	beq.w	8004eac <_printf_i+0x19c>
 8004d38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d40:	e03a      	b.n	8004db8 <_printf_i+0xa8>
 8004d42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d46:	2b15      	cmp	r3, #21
 8004d48:	d8f6      	bhi.n	8004d38 <_printf_i+0x28>
 8004d4a:	a101      	add	r1, pc, #4	@ (adr r1, 8004d50 <_printf_i+0x40>)
 8004d4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d50:	08004da9 	.word	0x08004da9
 8004d54:	08004dbd 	.word	0x08004dbd
 8004d58:	08004d39 	.word	0x08004d39
 8004d5c:	08004d39 	.word	0x08004d39
 8004d60:	08004d39 	.word	0x08004d39
 8004d64:	08004d39 	.word	0x08004d39
 8004d68:	08004dbd 	.word	0x08004dbd
 8004d6c:	08004d39 	.word	0x08004d39
 8004d70:	08004d39 	.word	0x08004d39
 8004d74:	08004d39 	.word	0x08004d39
 8004d78:	08004d39 	.word	0x08004d39
 8004d7c:	08004ebf 	.word	0x08004ebf
 8004d80:	08004de7 	.word	0x08004de7
 8004d84:	08004e79 	.word	0x08004e79
 8004d88:	08004d39 	.word	0x08004d39
 8004d8c:	08004d39 	.word	0x08004d39
 8004d90:	08004ee1 	.word	0x08004ee1
 8004d94:	08004d39 	.word	0x08004d39
 8004d98:	08004de7 	.word	0x08004de7
 8004d9c:	08004d39 	.word	0x08004d39
 8004da0:	08004d39 	.word	0x08004d39
 8004da4:	08004e81 	.word	0x08004e81
 8004da8:	6833      	ldr	r3, [r6, #0]
 8004daa:	1d1a      	adds	r2, r3, #4
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6032      	str	r2, [r6, #0]
 8004db0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004db4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004db8:	2301      	movs	r3, #1
 8004dba:	e09e      	b.n	8004efa <_printf_i+0x1ea>
 8004dbc:	6833      	ldr	r3, [r6, #0]
 8004dbe:	6820      	ldr	r0, [r4, #0]
 8004dc0:	1d19      	adds	r1, r3, #4
 8004dc2:	6031      	str	r1, [r6, #0]
 8004dc4:	0606      	lsls	r6, r0, #24
 8004dc6:	d501      	bpl.n	8004dcc <_printf_i+0xbc>
 8004dc8:	681d      	ldr	r5, [r3, #0]
 8004dca:	e003      	b.n	8004dd4 <_printf_i+0xc4>
 8004dcc:	0645      	lsls	r5, r0, #25
 8004dce:	d5fb      	bpl.n	8004dc8 <_printf_i+0xb8>
 8004dd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004dd4:	2d00      	cmp	r5, #0
 8004dd6:	da03      	bge.n	8004de0 <_printf_i+0xd0>
 8004dd8:	232d      	movs	r3, #45	@ 0x2d
 8004dda:	426d      	negs	r5, r5
 8004ddc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004de0:	230a      	movs	r3, #10
 8004de2:	4859      	ldr	r0, [pc, #356]	@ (8004f48 <_printf_i+0x238>)
 8004de4:	e011      	b.n	8004e0a <_printf_i+0xfa>
 8004de6:	6821      	ldr	r1, [r4, #0]
 8004de8:	6833      	ldr	r3, [r6, #0]
 8004dea:	0608      	lsls	r0, r1, #24
 8004dec:	f853 5b04 	ldr.w	r5, [r3], #4
 8004df0:	d402      	bmi.n	8004df8 <_printf_i+0xe8>
 8004df2:	0649      	lsls	r1, r1, #25
 8004df4:	bf48      	it	mi
 8004df6:	b2ad      	uxthmi	r5, r5
 8004df8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004dfa:	6033      	str	r3, [r6, #0]
 8004dfc:	bf14      	ite	ne
 8004dfe:	230a      	movne	r3, #10
 8004e00:	2308      	moveq	r3, #8
 8004e02:	4851      	ldr	r0, [pc, #324]	@ (8004f48 <_printf_i+0x238>)
 8004e04:	2100      	movs	r1, #0
 8004e06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e0a:	6866      	ldr	r6, [r4, #4]
 8004e0c:	2e00      	cmp	r6, #0
 8004e0e:	bfa8      	it	ge
 8004e10:	6821      	ldrge	r1, [r4, #0]
 8004e12:	60a6      	str	r6, [r4, #8]
 8004e14:	bfa4      	itt	ge
 8004e16:	f021 0104 	bicge.w	r1, r1, #4
 8004e1a:	6021      	strge	r1, [r4, #0]
 8004e1c:	b90d      	cbnz	r5, 8004e22 <_printf_i+0x112>
 8004e1e:	2e00      	cmp	r6, #0
 8004e20:	d04b      	beq.n	8004eba <_printf_i+0x1aa>
 8004e22:	4616      	mov	r6, r2
 8004e24:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e28:	fb03 5711 	mls	r7, r3, r1, r5
 8004e2c:	5dc7      	ldrb	r7, [r0, r7]
 8004e2e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e32:	462f      	mov	r7, r5
 8004e34:	42bb      	cmp	r3, r7
 8004e36:	460d      	mov	r5, r1
 8004e38:	d9f4      	bls.n	8004e24 <_printf_i+0x114>
 8004e3a:	2b08      	cmp	r3, #8
 8004e3c:	d10b      	bne.n	8004e56 <_printf_i+0x146>
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	07df      	lsls	r7, r3, #31
 8004e42:	d508      	bpl.n	8004e56 <_printf_i+0x146>
 8004e44:	6923      	ldr	r3, [r4, #16]
 8004e46:	6861      	ldr	r1, [r4, #4]
 8004e48:	4299      	cmp	r1, r3
 8004e4a:	bfde      	ittt	le
 8004e4c:	2330      	movle	r3, #48	@ 0x30
 8004e4e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e52:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e56:	1b92      	subs	r2, r2, r6
 8004e58:	6122      	str	r2, [r4, #16]
 8004e5a:	464b      	mov	r3, r9
 8004e5c:	4621      	mov	r1, r4
 8004e5e:	4640      	mov	r0, r8
 8004e60:	f8cd a000 	str.w	sl, [sp]
 8004e64:	aa03      	add	r2, sp, #12
 8004e66:	f7ff fee1 	bl	8004c2c <_printf_common>
 8004e6a:	3001      	adds	r0, #1
 8004e6c:	d14a      	bne.n	8004f04 <_printf_i+0x1f4>
 8004e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e72:	b004      	add	sp, #16
 8004e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e78:	6823      	ldr	r3, [r4, #0]
 8004e7a:	f043 0320 	orr.w	r3, r3, #32
 8004e7e:	6023      	str	r3, [r4, #0]
 8004e80:	2778      	movs	r7, #120	@ 0x78
 8004e82:	4832      	ldr	r0, [pc, #200]	@ (8004f4c <_printf_i+0x23c>)
 8004e84:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e88:	6823      	ldr	r3, [r4, #0]
 8004e8a:	6831      	ldr	r1, [r6, #0]
 8004e8c:	061f      	lsls	r7, r3, #24
 8004e8e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e92:	d402      	bmi.n	8004e9a <_printf_i+0x18a>
 8004e94:	065f      	lsls	r7, r3, #25
 8004e96:	bf48      	it	mi
 8004e98:	b2ad      	uxthmi	r5, r5
 8004e9a:	6031      	str	r1, [r6, #0]
 8004e9c:	07d9      	lsls	r1, r3, #31
 8004e9e:	bf44      	itt	mi
 8004ea0:	f043 0320 	orrmi.w	r3, r3, #32
 8004ea4:	6023      	strmi	r3, [r4, #0]
 8004ea6:	b11d      	cbz	r5, 8004eb0 <_printf_i+0x1a0>
 8004ea8:	2310      	movs	r3, #16
 8004eaa:	e7ab      	b.n	8004e04 <_printf_i+0xf4>
 8004eac:	4826      	ldr	r0, [pc, #152]	@ (8004f48 <_printf_i+0x238>)
 8004eae:	e7e9      	b.n	8004e84 <_printf_i+0x174>
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	f023 0320 	bic.w	r3, r3, #32
 8004eb6:	6023      	str	r3, [r4, #0]
 8004eb8:	e7f6      	b.n	8004ea8 <_printf_i+0x198>
 8004eba:	4616      	mov	r6, r2
 8004ebc:	e7bd      	b.n	8004e3a <_printf_i+0x12a>
 8004ebe:	6833      	ldr	r3, [r6, #0]
 8004ec0:	6825      	ldr	r5, [r4, #0]
 8004ec2:	1d18      	adds	r0, r3, #4
 8004ec4:	6961      	ldr	r1, [r4, #20]
 8004ec6:	6030      	str	r0, [r6, #0]
 8004ec8:	062e      	lsls	r6, r5, #24
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	d501      	bpl.n	8004ed2 <_printf_i+0x1c2>
 8004ece:	6019      	str	r1, [r3, #0]
 8004ed0:	e002      	b.n	8004ed8 <_printf_i+0x1c8>
 8004ed2:	0668      	lsls	r0, r5, #25
 8004ed4:	d5fb      	bpl.n	8004ece <_printf_i+0x1be>
 8004ed6:	8019      	strh	r1, [r3, #0]
 8004ed8:	2300      	movs	r3, #0
 8004eda:	4616      	mov	r6, r2
 8004edc:	6123      	str	r3, [r4, #16]
 8004ede:	e7bc      	b.n	8004e5a <_printf_i+0x14a>
 8004ee0:	6833      	ldr	r3, [r6, #0]
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	1d1a      	adds	r2, r3, #4
 8004ee6:	6032      	str	r2, [r6, #0]
 8004ee8:	681e      	ldr	r6, [r3, #0]
 8004eea:	6862      	ldr	r2, [r4, #4]
 8004eec:	4630      	mov	r0, r6
 8004eee:	f000 f859 	bl	8004fa4 <memchr>
 8004ef2:	b108      	cbz	r0, 8004ef8 <_printf_i+0x1e8>
 8004ef4:	1b80      	subs	r0, r0, r6
 8004ef6:	6060      	str	r0, [r4, #4]
 8004ef8:	6863      	ldr	r3, [r4, #4]
 8004efa:	6123      	str	r3, [r4, #16]
 8004efc:	2300      	movs	r3, #0
 8004efe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f02:	e7aa      	b.n	8004e5a <_printf_i+0x14a>
 8004f04:	4632      	mov	r2, r6
 8004f06:	4649      	mov	r1, r9
 8004f08:	4640      	mov	r0, r8
 8004f0a:	6923      	ldr	r3, [r4, #16]
 8004f0c:	47d0      	blx	sl
 8004f0e:	3001      	adds	r0, #1
 8004f10:	d0ad      	beq.n	8004e6e <_printf_i+0x15e>
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	079b      	lsls	r3, r3, #30
 8004f16:	d413      	bmi.n	8004f40 <_printf_i+0x230>
 8004f18:	68e0      	ldr	r0, [r4, #12]
 8004f1a:	9b03      	ldr	r3, [sp, #12]
 8004f1c:	4298      	cmp	r0, r3
 8004f1e:	bfb8      	it	lt
 8004f20:	4618      	movlt	r0, r3
 8004f22:	e7a6      	b.n	8004e72 <_printf_i+0x162>
 8004f24:	2301      	movs	r3, #1
 8004f26:	4632      	mov	r2, r6
 8004f28:	4649      	mov	r1, r9
 8004f2a:	4640      	mov	r0, r8
 8004f2c:	47d0      	blx	sl
 8004f2e:	3001      	adds	r0, #1
 8004f30:	d09d      	beq.n	8004e6e <_printf_i+0x15e>
 8004f32:	3501      	adds	r5, #1
 8004f34:	68e3      	ldr	r3, [r4, #12]
 8004f36:	9903      	ldr	r1, [sp, #12]
 8004f38:	1a5b      	subs	r3, r3, r1
 8004f3a:	42ab      	cmp	r3, r5
 8004f3c:	dcf2      	bgt.n	8004f24 <_printf_i+0x214>
 8004f3e:	e7eb      	b.n	8004f18 <_printf_i+0x208>
 8004f40:	2500      	movs	r5, #0
 8004f42:	f104 0619 	add.w	r6, r4, #25
 8004f46:	e7f5      	b.n	8004f34 <_printf_i+0x224>
 8004f48:	08005328 	.word	0x08005328
 8004f4c:	08005339 	.word	0x08005339

08004f50 <memmove>:
 8004f50:	4288      	cmp	r0, r1
 8004f52:	b510      	push	{r4, lr}
 8004f54:	eb01 0402 	add.w	r4, r1, r2
 8004f58:	d902      	bls.n	8004f60 <memmove+0x10>
 8004f5a:	4284      	cmp	r4, r0
 8004f5c:	4623      	mov	r3, r4
 8004f5e:	d807      	bhi.n	8004f70 <memmove+0x20>
 8004f60:	1e43      	subs	r3, r0, #1
 8004f62:	42a1      	cmp	r1, r4
 8004f64:	d008      	beq.n	8004f78 <memmove+0x28>
 8004f66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f6e:	e7f8      	b.n	8004f62 <memmove+0x12>
 8004f70:	4601      	mov	r1, r0
 8004f72:	4402      	add	r2, r0
 8004f74:	428a      	cmp	r2, r1
 8004f76:	d100      	bne.n	8004f7a <memmove+0x2a>
 8004f78:	bd10      	pop	{r4, pc}
 8004f7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f82:	e7f7      	b.n	8004f74 <memmove+0x24>

08004f84 <_sbrk_r>:
 8004f84:	b538      	push	{r3, r4, r5, lr}
 8004f86:	2300      	movs	r3, #0
 8004f88:	4d05      	ldr	r5, [pc, #20]	@ (8004fa0 <_sbrk_r+0x1c>)
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	4608      	mov	r0, r1
 8004f8e:	602b      	str	r3, [r5, #0]
 8004f90:	f7fb fe48 	bl	8000c24 <_sbrk>
 8004f94:	1c43      	adds	r3, r0, #1
 8004f96:	d102      	bne.n	8004f9e <_sbrk_r+0x1a>
 8004f98:	682b      	ldr	r3, [r5, #0]
 8004f9a:	b103      	cbz	r3, 8004f9e <_sbrk_r+0x1a>
 8004f9c:	6023      	str	r3, [r4, #0]
 8004f9e:	bd38      	pop	{r3, r4, r5, pc}
 8004fa0:	200002f4 	.word	0x200002f4

08004fa4 <memchr>:
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	b510      	push	{r4, lr}
 8004fa8:	b2c9      	uxtb	r1, r1
 8004faa:	4402      	add	r2, r0
 8004fac:	4293      	cmp	r3, r2
 8004fae:	4618      	mov	r0, r3
 8004fb0:	d101      	bne.n	8004fb6 <memchr+0x12>
 8004fb2:	2000      	movs	r0, #0
 8004fb4:	e003      	b.n	8004fbe <memchr+0x1a>
 8004fb6:	7804      	ldrb	r4, [r0, #0]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	428c      	cmp	r4, r1
 8004fbc:	d1f6      	bne.n	8004fac <memchr+0x8>
 8004fbe:	bd10      	pop	{r4, pc}

08004fc0 <_realloc_r>:
 8004fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fc4:	4680      	mov	r8, r0
 8004fc6:	4615      	mov	r5, r2
 8004fc8:	460c      	mov	r4, r1
 8004fca:	b921      	cbnz	r1, 8004fd6 <_realloc_r+0x16>
 8004fcc:	4611      	mov	r1, r2
 8004fce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fd2:	f7ff bc47 	b.w	8004864 <_malloc_r>
 8004fd6:	b92a      	cbnz	r2, 8004fe4 <_realloc_r+0x24>
 8004fd8:	f7ff fbda 	bl	8004790 <_free_r>
 8004fdc:	2400      	movs	r4, #0
 8004fde:	4620      	mov	r0, r4
 8004fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fe4:	f000 f81a 	bl	800501c <_malloc_usable_size_r>
 8004fe8:	4285      	cmp	r5, r0
 8004fea:	4606      	mov	r6, r0
 8004fec:	d802      	bhi.n	8004ff4 <_realloc_r+0x34>
 8004fee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004ff2:	d8f4      	bhi.n	8004fde <_realloc_r+0x1e>
 8004ff4:	4629      	mov	r1, r5
 8004ff6:	4640      	mov	r0, r8
 8004ff8:	f7ff fc34 	bl	8004864 <_malloc_r>
 8004ffc:	4607      	mov	r7, r0
 8004ffe:	2800      	cmp	r0, #0
 8005000:	d0ec      	beq.n	8004fdc <_realloc_r+0x1c>
 8005002:	42b5      	cmp	r5, r6
 8005004:	462a      	mov	r2, r5
 8005006:	4621      	mov	r1, r4
 8005008:	bf28      	it	cs
 800500a:	4632      	movcs	r2, r6
 800500c:	f7ff fbb2 	bl	8004774 <memcpy>
 8005010:	4621      	mov	r1, r4
 8005012:	4640      	mov	r0, r8
 8005014:	f7ff fbbc 	bl	8004790 <_free_r>
 8005018:	463c      	mov	r4, r7
 800501a:	e7e0      	b.n	8004fde <_realloc_r+0x1e>

0800501c <_malloc_usable_size_r>:
 800501c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005020:	1f18      	subs	r0, r3, #4
 8005022:	2b00      	cmp	r3, #0
 8005024:	bfbc      	itt	lt
 8005026:	580b      	ldrlt	r3, [r1, r0]
 8005028:	18c0      	addlt	r0, r0, r3
 800502a:	4770      	bx	lr

0800502c <_init>:
 800502c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502e:	bf00      	nop
 8005030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005032:	bc08      	pop	{r3}
 8005034:	469e      	mov	lr, r3
 8005036:	4770      	bx	lr

08005038 <_fini>:
 8005038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503a:	bf00      	nop
 800503c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503e:	bc08      	pop	{r3}
 8005040:	469e      	mov	lr, r3
 8005042:	4770      	bx	lr
